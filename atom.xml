<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heng</title>
  
  
  <link href="https://7heng.github.io/atom.xml" rel="self"/>
  
  <link href="https://7heng.github.io/"/>
  <updated>2021-04-11T10:03:59.068Z</updated>
  <id>https://7heng.github.io/</id>
  
  <author>
    <name>7heng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDBC之DAO</title>
    <link href="https://7heng.github.io/2021/04/11/JDBC%E4%B9%8BDAO/"/>
    <id>https://7heng.github.io/2021/04/11/JDBC%E4%B9%8BDAO/</id>
    <published>2021-04-11T08:34:46.000Z</published>
    <updated>2021-04-11T10:03:59.068Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>DAO：</strong>Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO。</li><li><strong>作用：</strong>为了实现功能的模块化，更有利于代码的维护和升级。</li></ul><p><strong>思路：</strong></p><ul><li>首先创建一个实现共同操作类的DAO，我们称为BaseDAO。</li><li>创建每个表的接口，定义每个表独特的方法。</li><li>创建每个表的实现类，实现每个表的接口并继承BaseDAO，去重写接口中的方法，调用BaseDAO中的共同方法去完成。</li></ul><p><strong>Demo：</strong></p><p><strong>【BaseDAO】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.ParameterizedType;</span><br><span class="line">import java.lang.reflect.Type;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line">import org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span><br><span class="line"></span><br><span class="line"> * </span><br><span class="line"></span><br><span class="line"> * @author HanYanBing</span><br><span class="line">   *</span><br><span class="line"></span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line">   *&#x2F;</span><br><span class="line">   public abstract class BaseDao&lt;T&gt; &#123;</span><br><span class="line">   private QueryRunner queryRunner &#x3D; new QueryRunner();</span><br><span class="line">   &#x2F;&#x2F; 定义一个变量来接收泛型的类型</span><br><span class="line">   private Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span><br><span class="line">   public BaseDao() &#123;</span><br><span class="line">   &#x2F;&#x2F; 获取子类的类型</span><br><span class="line">   Class clazz &#x3D; this.getClass();</span><br><span class="line">   &#x2F;&#x2F; 获取父类的类型</span><br><span class="line">   &#x2F;&#x2F; getGenericSuperclass()用来获取当前类的父类的类型</span><br><span class="line">   &#x2F;&#x2F; ParameterizedType表示的是带泛型的类型</span><br><span class="line">   ParameterizedType parameterizedType &#x3D; (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line">   &#x2F;&#x2F; 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span><br><span class="line">   &#x2F;&#x2F; 这个方法会返回一个Type的数组</span><br><span class="line">   Type[] types &#x3D; parameterizedType.getActualTypeArguments();</span><br><span class="line">   &#x2F;&#x2F; 获取具体的泛型的类型·</span><br><span class="line">   this.type &#x3D; (Class&lt;T&gt;) types[0];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line"></span><br><span class="line">    * 通用的增删改操作</span><br><span class="line">    * </span><br><span class="line">    * @param sql</span><br><span class="line">    * @param params</span><br><span class="line">    * @return</span><br><span class="line">      *&#x2F;</span><br><span class="line">      public int update(Connection conn,String sql, Object... params) &#123;</span><br><span class="line">      int count &#x3D; 0;</span><br><span class="line">      try &#123;</span><br><span class="line">      count &#x3D; queryRunner.update(conn, sql, params);</span><br><span class="line">      &#125; catch (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      &#125; </span><br><span class="line">      return count;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line"></span><br><span class="line">    * 获取一个对象</span><br><span class="line">    * </span><br><span class="line">    * @param sql</span><br><span class="line">    * @param params</span><br><span class="line">    * @return</span><br><span class="line">      *&#x2F;</span><br><span class="line">      public T getBean(Connection conn,String sql, Object... params) &#123;</span><br><span class="line">      T t &#x3D; null;</span><br><span class="line">      try &#123;</span><br><span class="line">      t &#x3D; queryRunner.query(conn, sql, new BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">      &#125; catch (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      &#125; </span><br><span class="line">      return t;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line"></span><br><span class="line">    * 获取所有对象</span><br><span class="line">    * </span><br><span class="line">    * @param sql</span><br><span class="line">    * @param params</span><br><span class="line">    * @return</span><br><span class="line">      *&#x2F;</span><br><span class="line">      public List&lt;T&gt; getBeanList(Connection conn,String sql, Object... params) &#123;</span><br><span class="line">      List&lt;T&gt; list &#x3D; null;</span><br><span class="line">      try &#123;</span><br><span class="line">      list &#x3D; queryRunner.query(conn, sql, new BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">      &#125; catch (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      &#125; </span><br><span class="line">      return list;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line"></span><br><span class="line">    * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span><br><span class="line">    * </span><br><span class="line">    * @param sql</span><br><span class="line">    * @param params</span><br><span class="line">    * @return</span><br><span class="line">      *&#x2F;</span><br><span class="line">      public Object getValue(Connection conn,String sql, Object... params) &#123;</span><br><span class="line">      Object count &#x3D; null;</span><br><span class="line">      try &#123;</span><br><span class="line">      &#x2F;&#x2F; 调用queryRunner的query方法获取一个单一的值</span><br><span class="line">      count &#x3D; queryRunner.query(conn, sql, new ScalarHandler&lt;&gt;(), params);</span><br><span class="line">      &#125; catch (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      &#125; </span><br><span class="line">      return count;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>【BookDAO】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.atguigu.bookstore.beans.Book;</span><br><span class="line">import com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line">public interface BookDao &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 从数据库中查询出所有的记录</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">List&lt;Book&gt; getBooks(Connection conn);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 向数据库中插入一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param book</span><br><span class="line"> *&#x2F;</span><br><span class="line">void saveBook(Connection conn,Book book);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 从数据库中根据图书的id删除一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param bookId</span><br><span class="line"> *&#x2F;</span><br><span class="line">void deleteBookById(Connection conn,String bookId);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据图书的id从数据库中查询出一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param bookId</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">Book getBookById(Connection conn,String bookId);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据图书的id从数据库中更新一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param book</span><br><span class="line"> *&#x2F;</span><br><span class="line">void updateBook(Connection conn,Book book);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取带分页的图书信息</span><br><span class="line"> * </span><br><span class="line"> * @param page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="line"> * @return 返回的Page对象是包含了所有属性的Page对象</span><br><span class="line"> *&#x2F;</span><br><span class="line">Page&lt;Book&gt; getPageBooks(Connection conn,Page&lt;Book&gt; page);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取带分页和价格范围的图书信息</span><br><span class="line"> * </span><br><span class="line"> * @param page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="line"> * @return 返回的Page对象是包含了所有属性的Page对象</span><br><span class="line"> *&#x2F;</span><br><span class="line">Page&lt;Book&gt; getPageBooksByPrice(Connection conn,Page&lt;Book&gt; page, double minPrice, double maxPrice);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【UserDAO】:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line"></span><br><span class="line">import com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param user</span><br><span class="line"> * @return User 数据库中有记录 null 数据库中无此记录</span><br><span class="line"> *&#x2F;</span><br><span class="line">User getUser(Connection conn,User user);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据User对象中的用户名从数据库中获取一条记录</span><br><span class="line"> * </span><br><span class="line"> * @param user</span><br><span class="line"> * @return true 数据库中有记录 false 数据库中无此记录</span><br><span class="line"> *&#x2F;</span><br><span class="line">boolean checkUsername(Connection conn,User user);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 向数据库中插入User对象</span><br><span class="line"> * </span><br><span class="line"> * @param user</span><br><span class="line"> *&#x2F;</span><br><span class="line">void saveUser(Connection conn,User user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【BookDaoImpl.java】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.atguigu.bookstore.beans.Book;</span><br><span class="line">import com.atguigu.bookstore.beans.Page;</span><br><span class="line">import com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line">import com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line">public class BookDaoImpl extends BaseDao&lt;Book&gt; implements BookDao &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;Book&gt; getBooks(Connection conn) &#123;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中得到一个List的方法</span><br><span class="line">List&lt;Book&gt; beanList &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;;</span><br><span class="line">beanList &#x3D; getBeanList(conn,sql);</span><br><span class="line">return beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void saveBook(Connection conn,Book book) &#123;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中通用的增删改的方法</span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void deleteBookById(Connection conn,String bookId) &#123;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;DELETE FROM books WHERE id &#x3D; ?&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中通用增删改的方法</span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Book getBookById(Connection conn,String bookId) &#123;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个对象的方法</span><br><span class="line">Book book &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;select id,title,author,price,sales,stock,img_path imgPath from books where id &#x3D; ?&quot;;</span><br><span class="line">book &#x3D; getBean(conn,sql, bookId);</span><br><span class="line">return book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void updateBook(Connection conn,Book book) &#123;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;update books set title &#x3D; ? , author &#x3D; ? , price &#x3D; ? , sales &#x3D; ? , stock &#x3D; ? where id &#x3D; ?&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中通用的增删改的方法</span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Page&lt;Book&gt; getPageBooks(Connection conn,Page&lt;Book&gt; page) &#123;</span><br><span class="line">&#x2F;&#x2F; 获取数据库中图书的总记录数</span><br><span class="line">String sql &#x3D; &quot;select count(*) from books&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个单一值的方法</span><br><span class="line">long totalRecord &#x3D; (long) getValue(conn,sql);</span><br><span class="line">&#x2F;&#x2F; 将总记录数设置都page对象中</span><br><span class="line">page.setTotalRecord((int) totalRecord);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取当前页中的记录存放的List</span><br><span class="line">String sql2 &#x3D; &quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个集合的方法</span><br><span class="line">List&lt;Book&gt; beanList &#x3D; getBeanList(conn,sql2, (page.getPageNo() - 1) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line">&#x2F;&#x2F; 将这个List设置到page对象中</span><br><span class="line">page.setList(beanList);</span><br><span class="line">return page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Page&lt;Book&gt; getPageBooksByPrice(Connection conn,Page&lt;Book&gt; page, double minPrice, double maxPrice) &#123;</span><br><span class="line">&#x2F;&#x2F; 获取数据库中图书的总记录数</span><br><span class="line">String sql &#x3D; &quot;select count(*) from books where price between ? and ?&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个单一值的方法</span><br><span class="line">long totalRecord &#x3D; (long) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line">&#x2F;&#x2F; 将总记录数设置都page对象中</span><br><span class="line">page.setTotalRecord((int) totalRecord);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取当前页中的记录存放的List</span><br><span class="line">String sql2 &#x3D; &quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个集合的方法</span><br><span class="line">List&lt;Book&gt; beanList &#x3D; getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - 1) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line">&#x2F;&#x2F; 将这个List设置到page对象中</span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line">return page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【UserDaoImpl.java】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line"></span><br><span class="line">import com.atguigu.bookstore.beans.User;</span><br><span class="line">import com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line">import com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl extends BaseDao&lt;User&gt; implements UserDao &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public User getUser(Connection conn,User user) &#123;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个对象的方法</span><br><span class="line">User bean &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;select id,username,password,email from users where username &#x3D; ? and password &#x3D; ?&quot;;</span><br><span class="line">bean &#x3D; getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean checkUsername(Connection conn,User user) &#123;</span><br><span class="line">&#x2F;&#x2F; 调用BaseDao中获取一个对象的方法</span><br><span class="line">User bean &#x3D; null;</span><br><span class="line">&#x2F;&#x2F; 写sql语句</span><br><span class="line">String sql &#x3D; &quot;select id,username,password,email from users where username &#x3D; ?&quot;;</span><br><span class="line">bean &#x3D; getBean(conn,sql, user.getUsername());</span><br><span class="line">return bean !&#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void saveUser(Connection conn,User user) &#123;</span><br><span class="line">&#x2F;&#x2F;写sql语句</span><br><span class="line">String sql &#x3D; &quot;insert into users(username,password,email) values(?,?,?)&quot;;</span><br><span class="line">&#x2F;&#x2F;调用BaseDao中通用的增删改的方法</span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【Book.java】:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 图书类</span><br><span class="line"></span><br><span class="line"> * @author songhongkang</span><br><span class="line">   *</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public class Book &#123;</span><br><span class="line"></span><br><span class="line">   private Integer id;</span><br><span class="line">   private String title; &#x2F;&#x2F; 书名</span><br><span class="line">   private String author; &#x2F;&#x2F; 作者</span><br><span class="line">   private double price; &#x2F;&#x2F; 价格</span><br><span class="line">   private Integer sales; &#x2F;&#x2F; 销量</span><br><span class="line">   private Integer stock; &#x2F;&#x2F; 库存</span><br><span class="line">   private String imgPath &#x3D; &quot;static&#x2F;img&#x2F;default.jpg&quot;; &#x2F;&#x2F; 封面图片的路径</span><br><span class="line">   &#x2F;&#x2F;构造器，get()，set()，toString()方法略</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>【Page.java】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"> * 页码类</span><br><span class="line"></span><br><span class="line"> * @author songhongkang</span><br><span class="line">   *</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public class Page&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">   private List&lt;T&gt; list; &#x2F;&#x2F; 每页查到的记录存放的集合</span><br><span class="line">   public static final int PAGE_SIZE &#x3D; 4; &#x2F;&#x2F; 每页显示的记录数</span><br><span class="line">   private int pageNo; &#x2F;&#x2F; 当前页</span><br><span class="line">   &#x2F;&#x2F;private int totalPageNo; &#x2F;&#x2F; 总页数，通过计算得到</span><br><span class="line">   private int totalRecord; &#x2F;&#x2F; 总记录数，通过查询数据库得到</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>【User.java】：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"> * 用户类</span><br><span class="line"></span><br><span class="line"> * @author songhongkang</span><br><span class="line">   *</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public class User &#123;</span><br><span class="line"></span><br><span class="line">   private Integer id;</span><br><span class="line">   private String username;</span><br><span class="line">   private String password;</span><br><span class="line">   private String email;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DAO：&lt;/strong&gt;Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO。&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java枚举与注解</title>
    <link href="https://7heng.github.io/2021/04/10/java%E6%9E%9A%E4%B8%BE%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
    <id>https://7heng.github.io/2021/04/10/java%E6%9E%9A%E4%B8%BE%E4%B8%8E%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-04-10T08:26:31.000Z</published>
    <updated>2021-04-10T09:45:30.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举："><a href="#枚举：" class="headerlink" title="枚举："></a>枚举：</h1><h3 id="一：枚举类的作用："><a href="#一：枚举类的作用：" class="headerlink" title="一：枚举类的作用："></a>一：枚举类的作用：</h3><ol><li>枚举类的理解：类的对象只有有限个，确定的，我们称之为枚举类。</li><li>当需要定义一组常量时，强烈建议使用枚举类。</li><li>如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</li></ol><h3 id="二：定义枚举类："><a href="#二：定义枚举类：" class="headerlink" title="二：定义枚举类："></a>二：定义枚举类：</h3><ol><li>JDK5.0之前，自定义枚举类;</li><li>JDK5.0,增加了可以使用<strong>enum</strong>关键字定义枚举类;</li></ol><p><strong>枚举类的属性：</strong></p><ul><li>枚举类对象的属性不应允许被改动，所以应该使用Private final修饰。</li><li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值。</li><li>若枚举类显式的定义了带参数的构造器，则在列出枚举值时也必须对应的传入参数。</li></ul><p><strong>自定义枚举类：</strong></p><ol><li>私有化类的构造器，保证不能在类的外部创建其对象。</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code></li><li>对象如果有实例变量，应该声明为private final,并在构造器中初始化。</li></ol><p><strong>使用enum定义枚举类：</strong></p><ol><li>使用enum定义的枚举类默认继承了java.lang.Enum类，因此不能再继承其它的类。</li><li>枚举类的构造器<strong>只能使用private</strong>权限修饰符。</li><li>枚举类的所有实例必须在枚举类中显示列出(, 分隔  ; 结尾)。列出的实例系统会<strong>自动添加public static final修饰</strong>。</li><li>必须在枚举类的第一行声明枚举类对象。</li></ol><p><em>Jdk1.5中可以在switch表达式中使用Enum定义的枚举类的对象作为表达式，case子句可以直接使用枚举值的名字，无需添加枚举类作为限定。</em></p><h3 id="三：Enum类中的常用方法："><a href="#三：Enum类中的常用方法：" class="headerlink" title="三：Enum类中的常用方法："></a>三：Enum类中的常用方法：</h3><ul><li>value()；返回枚举类型的对象数组。该方法可以很方便的遍历所有的枚举值。</li><li>valueOf(String str)；可以把一个字符串转换为对应的枚举类对象。要求字符串必须是枚举类对象的”名字”。如果不是，会有运行时异常：IllegalArgumentException。</li><li>toString()；返回当前枚举类对象常量的名称。</li></ul><p><img src="/images/Enum/enum_1.png"></p><h3 id="四：使用enum关键字定义的枚举类实现接口的情况："><a href="#四：使用enum关键字定义的枚举类实现接口的情况：" class="headerlink" title="四：使用enum关键字定义的枚举类实现接口的情况："></a>四：使用enum关键字定义的枚举类实现接口的情况：</h3><ul><li>实现接口，在enum类中实现抽象方法。</li><li>让枚举类的对象分别实现接口中的抽象方法。</li></ul><h4 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义枚举类：</span><br><span class="line">public class SeasonTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Season spring &#x3D; Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;自定义枚举类</span><br><span class="line">class Season&#123;</span><br><span class="line">    &#x2F;&#x2F;1.声明Season对象的属性:private final修饰</span><br><span class="line">    private final String seasonName;</span><br><span class="line">    private final String seasonDesc;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2.私有化类的构造器,并给对象属性赋值</span><br><span class="line">    private Season(String seasonName,String seasonDesc)&#123;</span><br><span class="line">        this.seasonName &#x3D; seasonName;</span><br><span class="line">        this.seasonDesc &#x3D; seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;3.提供当前枚举类的多个对象：public static final的</span><br><span class="line">    public static final Season SPRING &#x3D; new Season(&quot;春天&quot;,&quot;春暖花开&quot;);</span><br><span class="line">    public static final Season SUMMER &#x3D; new Season(&quot;夏天&quot;,&quot;夏日炎炎&quot;);</span><br><span class="line">    public static final Season AUTUMN &#x3D; new Season(&quot;秋天&quot;,&quot;秋高气爽&quot;);</span><br><span class="line">    public static final Season WINTER &#x3D; new Season(&quot;冬天&quot;,&quot;冰天雪地&quot;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;4.其他诉求1：获取枚举类对象的属性</span><br><span class="line">    public String getSeasonName() &#123;</span><br><span class="line">        return seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String getSeasonDesc() &#123;</span><br><span class="line">        return seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;4.其他诉求1：提供toString()</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Season&#123;&quot; +</span><br><span class="line">                &quot;seasonName&#x3D;&#39;&quot; + seasonName + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, seasonDesc&#x3D;&#39;&quot; + seasonDesc + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用enum关键字定义枚举类并实现接口，再达到枚举类的对象分别实现接口中的抽象方法的eg。</span><br><span class="line">interface Info&#123;</span><br><span class="line">    void show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用enum关键字枚举类</span><br><span class="line">enum Season1 implements Info&#123;</span><br><span class="line">    &#x2F;&#x2F;1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span><br><span class="line">    SPRING(&quot;春天&quot;,&quot;春暖花开&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;春天在哪里？&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(&quot;夏天&quot;,&quot;夏日炎炎&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;宁夏&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(&quot;秋天&quot;,&quot;秋高气爽&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;秋天不回来&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(&quot;冬天&quot;,&quot;冰天雪地&quot;)&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;大约在冬季&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2.声明Season对象的属性:private final修饰</span><br><span class="line">    private final String seasonName;</span><br><span class="line">    private final String seasonDesc;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;2.私有化类的构造器,并给对象属性赋值</span><br><span class="line">    </span><br><span class="line">    private Season1(String seasonName,String seasonDesc)&#123;</span><br><span class="line">        this.seasonName &#x3D; seasonName;</span><br><span class="line">        this.seasonDesc &#x3D; seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;4.其他诉求1：获取枚举类对象的属性</span><br><span class="line">    public String getSeasonName() &#123;</span><br><span class="line">        return seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String getSeasonDesc() &#123;</span><br><span class="line">        return seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    &#x2F;&#x2F;4.其他诉求1：提供toString()</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;    @Override</span><br><span class="line">&#x2F;&#x2F;    public String toString() &#123;</span><br><span class="line">&#x2F;&#x2F;        return &quot;Season1&#123;&quot; +</span><br><span class="line">&#x2F;&#x2F;                &quot;seasonName&#x3D;&#39;&quot; + seasonName + &#39;\&#39;&#39; +</span><br><span class="line">&#x2F;&#x2F;                &quot;, seasonDesc&#x3D;&#39;&quot; + seasonDesc + &#39;\&#39;&#39; +</span><br><span class="line">&#x2F;&#x2F;                &#39;&#125;&#39;;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    @Override</span><br><span class="line">&#x2F;&#x2F;    public void show() &#123;</span><br><span class="line">&#x2F;&#x2F;        System.out.println(&quot;这是一个季节&quot;);</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h1><h3 id="一：注解的使用："><a href="#一：注解的使用：" class="headerlink" title="一：注解的使用："></a>一：注解的使用：</h3><ul><li><p>JDK5.0新增的功能。</p></li><li><p>Annotation 其实就是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取。并执行相应的处理，通过使用Annotation，程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。</p></li><li><p>在javaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在javaEE/Android中注占据了更重要的角色，例如用来配置应用程序的任何切面，代替javaEE旧版中所遗留的繁冗代码和XML配置等。</p></li></ul><h3 id="二：Annotation的使用示例："><a href="#二：Annotation的使用示例：" class="headerlink" title="二：Annotation的使用示例："></a>二：Annotation的使用示例：</h3><p>①：生成文档相关的注解。</p><p>②：在编译时进行格式检查（JDK内置的三个基本注释）</p><ul><li>@Override：限定重写父类的方法，该注解只能用于方法。</li><li>@Deprecated：用于表示所修饰的元素(类、方法等)已过时，通常是因为所修饰的结构危险或存在更好的选择。</li><li>@SuppressWarnings：抑制编译器警告等。</li></ul><p>③：跟踪代码依赖性，实现替代配置文件功能。</p><h4 id="常见的Annotation示例："><a href="#常见的Annotation示例：" class="headerlink" title="常见的Annotation示例："></a>常见的Annotation示例：</h4><ul><li><p>使用 Annotation 时要在其前面增加 @ 符号, 并<strong>把该</strong> <strong>Annotation</strong> <strong>当成</strong></p><p><strong>一个修饰符使用。</strong>用于修饰它支持的程序元素。</p></li><li><p><strong>示例一：生成文档相关的注解</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@author 标明开发该类模块的作者，多个作者之间使用,分割</span><br><span class="line"></span><br><span class="line">@version 标明该类模块的版本</span><br><span class="line"></span><br><span class="line">@see 参考转向，也就是相关主题</span><br><span class="line"></span><br><span class="line">@since 从哪个版本开始增加的</span><br><span class="line"></span><br><span class="line">@param 对方法中某参数的说明，如果没有参数就不能写</span><br><span class="line"></span><br><span class="line">@return 对方法返回值的说明，如果方法的返回值类型是void就不能写</span><br><span class="line"></span><br><span class="line">@exception 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写</span><br><span class="line"></span><br><span class="line">其中</span><br><span class="line"></span><br><span class="line">@param @return 和 @exception 这三个标记都是只用于方法的。</span><br><span class="line"></span><br><span class="line">@param的格式要求：@param 形参名 形参类型 形参说明</span><br><span class="line"></span><br><span class="line">@return 的格式要求：@return 返回值类型 返回值说明</span><br><span class="line"></span><br><span class="line">@exception的格式要求：@exception 异常类型 异常说明</span><br><span class="line"></span><br><span class="line">@param和@exception可以并列多个</span><br></pre></td></tr></table></figure></li></ul><h3 id="三：如何自定义注解："><a href="#三：如何自定义注解：" class="headerlink" title="三：如何自定义注解："></a>三：如何自定义注解：</h3><ul><li><p>定义新的 Annotation 类型使用 <strong>@interface</strong> 关键字</p></li><li><p>自定义注解自动继承了<strong>java.lang.annotation.Annotation</strong> <strong>接口</strong></p></li><li><p>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其</p><p>方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能</p><p>是八种基本数据类型、<strong>String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</strong>。 </p></li><li><p>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始</p><p>值可使用 <strong>default 关键字</strong></p></li><li><p>如果只有一个参数成员，建议使用<strong>参数名为value</strong></p></li><li><p>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认</p><p>值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，</p><p>可以省略“value=” </p></li><li><p>没有成员定义的 Annotation 称为<strong>标记</strong>; 包含成员变量的 Annotation 称为元数</p><p>据 Annotation</p></li></ul><p><strong>注意：</strong>自定义注解必须配上注解的信息处理流程才有意义。</p><h3 id="四：JDK提供的四种元注解："><a href="#四：JDK提供的四种元注解：" class="headerlink" title="四：JDK提供的四种元注解："></a>四：JDK提供的四种元注解：</h3><p>元注解：对现有的注解进行解释说明的注解。</p><ul><li><p>Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为）\RUNTIME 只有声明为RUNTIME生命周期的注解，才能通过反射获取。</p></li><li><p>Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p><p>———-出现的频率较低———-</p></li><li><p> Documented:表示所修饰的注解在被javadoc解析时，保留下来。</p></li><li><p>Inherited:被它修饰的 Annotation 将具有继承性。</p></li></ul><h3 id="五：JDK8中注解的新特性："><a href="#五：JDK8中注解的新特性：" class="headerlink" title="五：JDK8中注解的新特性："></a>五：JDK8中注解的新特性：</h3><ul><li>可重复注解：<ul><li>① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</li><li>② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</li></ul></li><li>类型注解：<ul><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）</li><li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li></ul></li></ul><h4 id="Demo：-1"><a href="#Demo：-1" class="headerlink" title="Demo："></a>Demo：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.Annotation;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class AnnotationTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person p &#x3D; new Student();</span><br><span class="line">        p.walk();</span><br><span class="line">    </span><br><span class="line">        Date date &#x3D; new Date(2020, 10, 11);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    </span><br><span class="line">        @SuppressWarnings(&quot;unused&quot;)</span><br><span class="line">        int num &#x3D; 10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&#123; &quot;unused&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">        ArrayList list &#x3D; new ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testGetAnnotation()&#123;</span><br><span class="line">        Class clazz &#x3D; Student.class;</span><br><span class="line">        Annotation[] annotations &#x3D; clazz.getAnnotations();</span><br><span class="line">        for(int i &#x3D; 0;i &lt; annotations.length;i++)&#123;</span><br><span class="line">            System.out.println(annotations[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;jdk 8之前的写法：</span><br><span class="line">&#x2F;&#x2F;@MyAnnotations(&#123;@MyAnnotation(value&#x3D;&quot;hi&quot;),@MyAnnotation(value&#x3D;&quot;hi&quot;)&#125;)</span><br><span class="line">@MyAnnotation(value&#x3D;&quot;hi&quot;)</span><br><span class="line">@MyAnnotation(value&#x3D;&quot;abc&quot;)</span><br><span class="line">class Person&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @MyAnnotation</span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    @MyAnnotation</span><br><span class="line">    public void walk()&#123;</span><br><span class="line">        System.out.println(&quot;人走路&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;人吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Info&#123;</span><br><span class="line">    void show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person implements Info&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void walk() &#123;</span><br><span class="line">        System.out.println(&quot;学生走路&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void show() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Generic&lt;@MyAnnotation T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    public void show() throws @MyAnnotation RuntimeException&#123;</span><br><span class="line">    </span><br><span class="line">        ArrayList&lt;@MyAnnotation String&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        int num &#x3D; (@MyAnnotation int) 10L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可重复注解eg：</span><br><span class="line">&#x2F;&#x2F; 自定义注解：MyAnnotation</span><br><span class="line">&#x2F;&#x2F; @Repeatable(MyAnnotations.class) 与MyAnnotations搭配实现可重复注解。</span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">import static java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line">   @Inherited</span><br><span class="line">   @Repeatable(MyAnnotations.class)</span><br><span class="line">   @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">   @Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line">   public @interface MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">   String value() default &quot;hello&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; 自定义注解：MyAnnotations</span><br><span class="line">&#x2F;&#x2F; 实现可重复注解，需要与MyAnnotation的元注解相同。</span><br><span class="line">import java.lang.annotation.Inherited;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">import static java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line">    @Inherited</span><br><span class="line">    @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">    @Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line">    public @interface MyAnnotations &#123;</span><br><span class="line"></span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;枚举：&quot;&gt;&lt;a href=&quot;#枚举：&quot; class=&quot;headerlink&quot; title=&quot;枚举：&quot;&gt;&lt;/a&gt;枚举：&lt;/h1&gt;&lt;h3 id=&quot;一：枚举类的作用：&quot;&gt;&lt;a href=&quot;#一：枚举类的作用：&quot; class=&quot;headerlink&quot; title=&quot;一：枚</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法之查找</title>
    <link href="https://7heng.github.io/2021/04/09/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%9F%A5%E6%89%BE/"/>
    <id>https://7heng.github.io/2021/04/09/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%9F%A5%E6%89%BE/</id>
    <published>2021-04-09T12:04:56.000Z</published>
    <updated>2021-04-10T03:09:32.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表的查找："><a href="#线性表的查找：" class="headerlink" title="线性表的查找："></a>线性表的查找：</h2><h3 id="一：顺序查找-线性查找-："><a href="#一：顺序查找-线性查找-：" class="headerlink" title="一：顺序查找(线性查找)："></a>一：顺序查找(线性查找)：</h3><p><strong>理解：</strong>顺序查找一个数据，找到该元素就返回其在数组中的下标，没找到则返回空。</p><p><strong>优点：</strong>算法简单，逻辑次序无要求，且不同存储结构均适用。</p><p><strong>缺点：</strong>ASL(平均查找长度)太长，时间效率低。</p><p><strong>Demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class TestSequentialSearch &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a[]&#x3D;&#123;49,38,65,97,76,13,27,49,78,34,12,64,5,4,62,&#125;;</span><br><span class="line">System.out.println(&quot;请输入要查询的数字：&quot;);</span><br><span class="line"> Scanner input&#x3D;new Scanner(System.in);</span><br><span class="line"> int input1&#x3D;input.nextInt();</span><br><span class="line"> SequentialSearch(a,input1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static void SequentialSearch(int[] arr,int input)&#123;</span><br><span class="line"></span><br><span class="line"> for(int i&#x3D;0;i&lt;arr.length;i++)&#123;</span><br><span class="line"> if(arr[i]&#x3D;&#x3D;input)&#123;</span><br><span class="line"> System.out.println(input+&quot;的位置为：&quot;+i);</span><br><span class="line"> break;</span><br><span class="line"> &#125;</span><br><span class="line"> if(i&#x3D;&#x3D;arr.length-1)</span><br><span class="line"> System.out.println(&quot;No Result!&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度：</strong>O(n)</p><p><strong>空间复杂度：</strong>O(1)</p><p><strong>小Tips：</strong>可以添设”哨兵“，来加快速度。</p><h3 id="二：折半查找-二分或对分查找-："><a href="#二：折半查找-二分或对分查找-：" class="headerlink" title="二：折半查找(二分或对分查找)："></a>二：折半查找(二分或对分查找)：</h3><p><strong>理解：</strong>得到首元素的索引head，并求出数组长度length-1得到尾元素的索引end。利用首尾元素求出中间元素middle， [ (head + end) / 2 ] ,利用middle值与target值进行比较，如果相同，则返回。如果不同,middle&gt;target，则进行尾元素索引的更改,变为end=middle-1；如果middle&lt;target，则进行首元素索引的更改,变为head=middle+1；</p><p><strong>优点：</strong>效率比顺序查找高。</p><p><strong>缺点：</strong>只适用于有序表，且限于顺序存储结构(对线性表无效)。</p><p><strong>Demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class SearchUtils &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SearchUtils su &#x3D; new SearchUtils();</span><br><span class="line">        int[] arr &#x3D; &#123;1,3,6,9,12,23,33,44,45,67,78,98,100&#125;;</span><br><span class="line">        int res &#x3D; su.binarySearch(arr, 44);</span><br><span class="line">        System.out.println(&quot;res&#x3D;&quot; + res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int binarySearch(int[] arr, int target) &#123;</span><br><span class="line">        int head &#x3D; 0;</span><br><span class="line">        int end &#x3D; arr.length - 1;</span><br><span class="line">        int middle;</span><br><span class="line">        while (head &lt;&#x3D; end) &#123;</span><br><span class="line">            middle &#x3D; (head + end) &#x2F; 2;</span><br><span class="line">            &#x2F;&#x2F;如果要查找的元素target小于中间位置的元素middle，指向数组的较大端的end索引重新指向中间索引middle的左边（middle-1）</span><br><span class="line">            if (target &lt; arr[middle]) &#123;</span><br><span class="line">                end &#x3D; middle - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;如果要查找的元素target大于中间位置的元素middle，指向数组的较小端的head索引重新指向中间索引middle的右边（middle+1）</span><br><span class="line">            if (target &gt; arr[middle]) &#123;</span><br><span class="line">                head &#x3D; middle + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            if (arr[middle] &#x3D;&#x3D; target) &#123;</span><br><span class="line">                return middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(lg2^n)</p><h3 id="三：分块查找-索引顺序表的查找-："><a href="#三：分块查找-索引顺序表的查找-：" class="headerlink" title="三：分块查找(索引顺序表的查找)："></a>三：分块查找(索引顺序表的查找)：</h3><p><strong>理解：</strong>先将所有元素按大小进行分块，然后在块内进行查找。在分块时，块内的元素不一定是有序的，只要一个块内的元素在同一区间就行。用标准的语言描述是：算法的思想是将n个数据元素”按块有序”划分为m块,(m ≤ n)。每块中的关键字（元素）不一定有序，但前一块中的最大关键字必须小于后一块的最小关键字，即要求表示“分块有序”的。</p><p><strong>思想：</strong>首先查找索引表，因为索引表为有序表，所以可以利用顺序或折半查找，再在块内进行查找，因为块内可以无序，所以利用顺序查找，在块内查找到则显示查询成功，否则查找失败。</p><p><strong>e.g：索引表：</strong></p><table><thead><tr><th align="center">14</th><th align="center">34</th><th align="center">66</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">5</td><td align="center">10</td></tr></tbody></table><p><strong>元素表：</strong></p><table><thead><tr><th align="center">索引</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th></tr></thead><tbody><tr><td align="center">值</td><td align="center">8</td><td align="center">14</td><td align="center">6</td><td align="center">9</td><td align="center">10</td><td align="center">22</td><td align="center">34</td><td align="center">18</td><td align="center">19</td><td align="center">31</td><td align="center">40</td><td align="center">38</td><td align="center">54</td><td align="center">66</td><td align="center">46</td></tr></tbody></table><p><strong>查找过程：</strong>先确定待查记录所在块(顺序或折半查找),再在块内查找(顺序查找)。</p><p><strong>查找效率：</strong>ASL=Lb（对索引表查找的ASL）+Lw（对块内查找的ASL）</p><p><strong>优点：</strong>插入删除比较容易，无需进行大量移动。</p><p><strong>缺点：</strong>要增加一个索引表的存储空间并对初始化索引表并对初始索引表进行排序运算。</p><p><strong>适用情况：</strong>如果线性表既要快速查找又经常动态变化，则可采用分块查找。</p><p><strong>Demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public class SSTable &#123;</span><br><span class="line"></span><br><span class="line">    private int data[];</span><br><span class="line">    private int length;</span><br><span class="line">    public int searchIndex(IndexTable it, int m, SSTable st, int n, int k) &#123;</span><br><span class="line">        int low &#x3D; 0, high &#x3D; m -1, mid, i;</span><br><span class="line">        int b &#x3D; n&#x2F;m;</span><br><span class="line">        while (low &lt;&#x3D; high) &#123;</span><br><span class="line">            mid&#x3D;(low + high) &#x2F; 2;</span><br><span class="line">            if (it.elem[mid].key &gt;&#x3D; k) &#123;</span><br><span class="line">                high &#x3D; mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                low &#x3D; mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (low &lt; m) &#123;</span><br><span class="line">            i &#x3D; it.elem[low].start;</span><br><span class="line">            while (i &lt;&#x3D; it.elem[low].start + b -1 &amp;&amp; st.data[i] !&#x3D; k) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i &lt;&#x3D; it.elem[low].start + b -1)&#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void  createSSTable(int[] a)&#123;</span><br><span class="line">        this.data &#x3D; new int[a.length];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            this.data[i] &#x3D; a[i];</span><br><span class="line">            this.length++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 索引表结点 *&#x2F;</span><br><span class="line">    public class IndexItem &#123;</span><br><span class="line">        public  int key;</span><br><span class="line">        public  int start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 索引表 *&#x2F;</span><br><span class="line">    public class IndexTable&#123;</span><br><span class="line">        public  IndexItem[] elem;</span><br><span class="line">        public int length &#x3D; 0;</span><br><span class="line">        public void createIndexTable(int[][] b)&#123;</span><br><span class="line">            this.elem &#x3D; new IndexItem[b.length];</span><br><span class="line">            int i;</span><br><span class="line">            for (i &#x3D; 0; i &lt; b.length; i++)&#123;</span><br><span class="line">                elem[i] &#x3D; new IndexItem();</span><br><span class="line">                elem[i].key &#x3D; b[i][0];</span><br><span class="line">                elem[i].start &#x3D; b[i][1];</span><br><span class="line">                this.length++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] a &#x3D; &#123;8, 14, 6, 9, 10, 22, 34, 18, 19, 31, 40, 38, 54, 66, 46&#125;;</span><br><span class="line">        int[][] b &#x3D; &#123;&#123;14, 0&#125;,&#123;34, 5&#125;,&#123;66, 10&#125;&#125;;</span><br><span class="line">        SSTable st &#x3D; new SSTable();</span><br><span class="line">        IndexTable it &#x3D; st.new IndexTable();</span><br><span class="line">        st.createSSTable(a);</span><br><span class="line">        it.createIndexTable(b);</span><br><span class="line">        int x &#x3D; st.searchIndex(it, b.length, st, a.length, 10);</span><br><span class="line">        if (x &lt; 0) &#123;</span><br><span class="line">            System.out.println(&quot;要查找的元素不存在&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;查找成功，该元素在表中的位置为：&quot; + (x + 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数表的查找："><a href="#数表的查找：" class="headerlink" title="数表的查找："></a>数表的查找：</h2><ul><li>当表插入、删除等操作频繁时，为维护表的有序性，需要移动表中很多记录。</li></ul><p>改用动态查找表—几种特殊的树</p><ul><li><p>表结构在<strong>查找过程中动态生成</strong>。</p></li><li><p>对于给定值key，若表中存在，则成功返回；否则，插入关键字等于key的记录。</p></li></ul><h4 id="1：二叉排序树："><a href="#1：二叉排序树：" class="headerlink" title="1：二叉排序树："></a>1：二叉排序树：</h4><ul><li>又称二叉搜索树，二叉查找树。</li></ul><p><strong>定义：</strong></p><p>二叉排序树或是空树，或是满足如下性质的二叉树：</p><ol><li>若其<strong>左子树非空</strong>，则左子树上所有结点的值均<strong>小于根结点</strong>的值;</li><li>若其<strong>右子树非空</strong>，则右子树上所有节点的值均<strong>大于根节点</strong>的值;</li><li>其<strong>左右子树本身又各是一颗二叉排序树</strong>;</li></ol><p><strong>中序遍历非空的二叉排序树所得到的数据元素序列是一个按关键字排列的递增有序序列</strong>。</p><h5 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h5><ul><li>若查找的关键字等于根节点，成功。</li><li>否则<ul><li>若小于根节点，查其左子树。</li><li>若大于根结点，查其右子树。</li></ul></li><li>在左右子数上的操作类似。</li></ul><p><strong>进阶思想：二叉排序树的递归查找</strong></p><ol><li>若二叉排序树为空，则查找失败，返回空指针。</li><li>若二叉树排序树非空，则给定值key与根节点的关键字。</li></ol><ul><li>若key等于根结点，则查找成功，返回根节点地址。</li><li>若key小于根结点，则进一步查找左子树。</li><li>若key大于根节点，则进一步查找右子树。</li></ul><p><strong>二叉树排序树的查找分析：</strong></p><p>二叉排序树上查找某关键字等于给定值的结点过程，其实就是走了一条从根到该结点的路径。</p><ul><li><strong>比较的关键字次数=此节点所在层次数</strong> </li><li><strong>最多的比较次数=树的深度</strong></li><li>含有n个结点的二叉排序树的<strong>平均查找长度</strong>和树的<strong>形态</strong>有关。</li><li>尽量让二叉树的形态均衡，提高二叉排序树的查找效率。</li></ul><p><img src="/images/Tree/tree_1.png"></p><h5 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h5><ul><li>若二叉排序树为空，则插入结点作为根节点插入到空树中。</li><li>否则，继续在其左、右子树上查找<ul><li>树中已有，不再插入</li><li>树中没有<ul><li>查找直至某个叶子结点的左子树或右子树为空为止，则插入结点应为该叶子结点的左孩子或有孩子。</li></ul></li></ul></li></ul><p><strong>通俗一点的说法就是：</strong></p><p>①：如果空，则为根节点。</p><p>②：大于根结点，插入右子树。</p><p>③：小于根结点，插入左子树。</p><p><strong>二叉排序树的操作：—生成：</strong></p><ul><li>从空树出发，经过一系列的查找、插入操作之后，可生成一棵二叉排序树。</li><li><strong>一个无序列序列可通过构造二叉排序树而变成一个有序序列。构造树的过程就是对无序序列进行排序的过程。</strong></li><li>插入的结点均为叶子结点，故无需移动其他结点。相当于在有序序列上插入记录而无需移动其他记录。</li></ul><p><strong>但是：</strong></p><ul><li>关键字的输入顺序不同，建立的二叉树排序树不同。</li></ul><h5 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h5><p>关于删除，相对来说要比查找和插入要麻烦一些，但是请耐心看下去。</p><ul><li>从二叉排序树中删除一个结点，不能把以该结点为根的子树都删去，只能删除该结点，并且还<strong>应保证删除后所得的二叉树仍然满足二叉排序树的性质不变</strong>。</li><li>由于中序遍历二叉排序树可以得到一个递增有序的序列。那么，在二叉排序树中删去一个结点相当于删去有序序列中的一个结点。<ul><li>将因删除结点而断开的二叉链表重新连接起来。</li><li>防止重新链接后树的高度增加。</li></ul></li></ul><p><strong>通俗一点的说法就是：</strong></p><p>①：被删除的为叶子结点，直接删去该结点。</p><p>②：被删除结点只有右孩子或左孩子，用其左子树或右子树替换它(结点替换)。其双亲结点的相应指针域的值改为”指向被删除结点的左子树或右子树”。</p><p>③：被删除的节点上既有左子树，又有右子树：</p><ul><li>(1)：用前驱结点去替换，然后删除要删除的结点。</li><li>(2)：用后继结点去替换，然后删除要删除的结点。</li><li>不管用前驱结点替换还是后继结点替换，都应该保存二叉树的性质;</li></ul><p><img src="/images/Tree/tree_2.png"></p><p><strong>Demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">    public class BinaryTree &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * BinaryTree 的节点数据结构</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private class TreeNode&#123;</span><br><span class="line">            private int key &#x3D; 0;</span><br><span class="line">            private String data &#x3D; null;</span><br><span class="line">            private boolean isVisited &#x3D; false;</span><br><span class="line">            private TreeNode leftChild &#x3D; null;</span><br><span class="line">            private TreeNode rightChild &#x3D; null;</span><br><span class="line"></span><br><span class="line">            public TreeNode()&#123;&#125;</span><br><span class="line">            public TreeNode(int key,String data)&#123;</span><br><span class="line">                this.key &#x3D; key;</span><br><span class="line">                this.data &#x3D; data;</span><br><span class="line">                this.leftChild &#x3D; null;</span><br><span class="line">                this.rightChild &#x3D; null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取根节点</span><br><span class="line">        public TreeNode getRoot() &#123;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setRoot(TreeNode root) &#123;</span><br><span class="line">            this.root &#x3D; root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;定义根节点</span><br><span class="line">        private TreeNode root &#x3D; null;</span><br><span class="line">        public BinaryTree()&#123;</span><br><span class="line">            root &#x3D; new TreeNode(10,&quot;A&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 创建一棵二叉树</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public void createBinaryTree(TreeNode root)&#123;</span><br><span class="line">            TreeNode nodeB &#x3D; new TreeNode(8,&quot;B&quot;);</span><br><span class="line">            TreeNode nodeC &#x3D; new TreeNode(12,&quot;C&quot;);</span><br><span class="line">            TreeNode nodeD &#x3D; new TreeNode(7,&quot;D&quot;);</span><br><span class="line">            TreeNode nodeE &#x3D; new TreeNode(9,&quot;E&quot;);</span><br><span class="line">            TreeNode nodeF &#x3D; new TreeNode(22,&quot;F&quot;);</span><br><span class="line">            root.leftChild &#x3D; nodeB;</span><br><span class="line">            root.rightChild &#x3D; nodeC;</span><br><span class="line">            nodeB.leftChild &#x3D; nodeD;</span><br><span class="line">            nodeB.rightChild &#x3D; nodeE;</span><br><span class="line">            nodeC.rightChild &#x3D; nodeF;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 前序遍历</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public void preOrder(TreeNode node)&#123;</span><br><span class="line">            if(node !&#x3D; null)&#123;</span><br><span class="line">                visited(node);</span><br><span class="line">                preOrder(node.leftChild);</span><br><span class="line">                preOrder(node.rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 中序遍历</span><br><span class="line">         * @param node</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        public void inOrder(TreeNode node)&#123;</span><br><span class="line">            if(node !&#x3D; null)&#123;</span><br><span class="line">                preOrder(node.leftChild);</span><br><span class="line">                visited(node);</span><br><span class="line">                preOrder(node.rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 后序遍历</span><br><span class="line">         * @param node</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        public void postOrder(TreeNode node)&#123;</span><br><span class="line">            if(node !&#x3D; null)&#123;</span><br><span class="line">                preOrder(node.leftChild);</span><br><span class="line">                preOrder(node.rightChild);</span><br><span class="line">                visited(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 非递归前序遍历</span><br><span class="line">         * @param node</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        public void nonRecPreOrder(TreeNode node)&#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack &#x3D; new Stack&lt;&gt;();</span><br><span class="line">            TreeNode pNode &#x3D; node;</span><br><span class="line">            while(pNode !&#x3D; null || stack.size()&gt;0)&#123;</span><br><span class="line">                while(pNode !&#x3D; null)&#123;</span><br><span class="line">                    visited(pNode);</span><br><span class="line">                    stack.push(pNode);</span><br><span class="line">                    pNode &#x3D; pNode.leftChild;</span><br><span class="line">                &#125;</span><br><span class="line">                if(stack.size()&gt;0)&#123;</span><br><span class="line">                    pNode &#x3D; stack.pop();</span><br><span class="line">                    pNode &#x3D; pNode.rightChild;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 非递归中序遍历</span><br><span class="line">         * @param node</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        public void nonRecInOrder(TreeNode node)&#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack &#x3D; new Stack&lt;&gt;();</span><br><span class="line">            TreeNode pNode &#x3D; node;</span><br><span class="line">            while(pNode !&#x3D; null || stack.size()&gt;0)&#123;</span><br><span class="line">                while(pNode !&#x3D; null)&#123;</span><br><span class="line">                    stack.push(pNode);</span><br><span class="line">                    pNode &#x3D; pNode.leftChild;</span><br><span class="line">                &#125;</span><br><span class="line">                if(stack.size()&gt;0)&#123;</span><br><span class="line">                    pNode &#x3D; stack.pop();</span><br><span class="line">                    visited(pNode);</span><br><span class="line">                    pNode &#x3D; pNode.rightChild;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 非递归后序遍历</span><br><span class="line">         * @param pNode</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public void nonRecPostOrder(TreeNode pNode)&#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack &#x3D; new Stack&lt;&gt;();</span><br><span class="line">            TreeNode node &#x3D; pNode;</span><br><span class="line">            while(pNode !&#x3D; null)&#123;</span><br><span class="line">&#x2F;&#x2F;左子树入栈</span><br><span class="line">                while(pNode.leftChild !&#x3D; null)&#123;</span><br><span class="line">                    stack.push(pNode);</span><br><span class="line">                    pNode &#x3D; pNode.leftChild;</span><br><span class="line">                &#125;</span><br><span class="line">&#x2F;&#x2F;当前节点无右子树或者右子树已输出</span><br><span class="line">                while(pNode !&#x3D; null &amp;&amp; (pNode.rightChild &#x3D;&#x3D; null || pNode.rightChild &#x3D;&#x3D; node))&#123;</span><br><span class="line">                    visited(pNode);</span><br><span class="line">&#x2F;&#x2F;记录上一个已输出的节点</span><br><span class="line">                    node &#x3D; pNode;</span><br><span class="line">                    if(!stack.isEmpty())&#123;</span><br><span class="line">                        pNode &#x3D; stack.pop();</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#x2F;&#x2F;右子树入栈</span><br><span class="line">                stack.push(pNode);</span><br><span class="line">                pNode &#x3D; pNode.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void visited(TreeNode node) &#123;</span><br><span class="line">            node.isVisited &#x3D; true;</span><br><span class="line">            System.out.println(node.data+&quot;,&quot;+node.key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 计算树的高度</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private int height(TreeNode node)&#123;</span><br><span class="line">            if(node &#x3D;&#x3D; null)&#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                int i &#x3D; height(node.leftChild);</span><br><span class="line">                int j &#x3D; height(node.rightChild);</span><br><span class="line">                return (i&lt;j)?j+1:i+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 计算树的节点数</span><br><span class="line">         * @param node</span><br><span class="line">         * @return 树的节点数</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        private int size(TreeNode node)&#123;</span><br><span class="line">            if(node &#x3D;&#x3D; null)&#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return 1+size(node.leftChild)+size(node.rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            BinaryTree binaryTree &#x3D; new BinaryTree();</span><br><span class="line">            TreeNode root &#x3D; binaryTree.root;</span><br><span class="line">            binaryTree.createBinaryTree(root);</span><br><span class="line">            System.out.println(binaryTree.height(root));</span><br><span class="line">            System.out.println(binaryTree.size(root));</span><br><span class="line">            binaryTree.preOrder(root);</span><br><span class="line">            System.out.println(&quot;*******&quot;);</span><br><span class="line">            binaryTree.nonRecPreOrder(root);</span><br><span class="line">            System.out.println(&quot;*******&quot;);</span><br><span class="line">            binaryTree.nonRecInOrder(root);</span><br><span class="line">            System.out.println(&quot;-------------&quot;);</span><br><span class="line">            binaryTree.nonRecPostOrder(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2：平衡二叉树："><a href="#2：平衡二叉树：" class="headerlink" title="2：平衡二叉树："></a>2：平衡二叉树：</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表的查找：&quot;&gt;&lt;a href=&quot;#线性表的查找：&quot; class=&quot;headerlink&quot; title=&quot;线性表的查找：&quot;&gt;&lt;/a&gt;线性表的查找：&lt;/h2&gt;&lt;h3 id=&quot;一：顺序查找-线性查找-：&quot;&gt;&lt;a href=&quot;#一：顺序查找-线性查找-：&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDBC事务</title>
    <link href="https://7heng.github.io/2021/04/08/JDBC%E4%BA%8B%E5%8A%A1/"/>
    <id>https://7heng.github.io/2021/04/08/JDBC%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-04-08T11:29:04.000Z</published>
    <updated>2021-04-08T12:51:50.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库事务介绍："><a href="#数据库事务介绍：" class="headerlink" title="数据库事务介绍："></a>数据库事务介绍：</h3><ul><li><strong>事务：</strong>一组逻辑单元，使数据从一种状态变换到另一种状态。</li><li><strong>事务处理（事务操作)：</strong>保证所有事务都为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被<strong>提交(commit)</strong>,那么这些修改就永久地保存下来；要么所有的事务都<strong>被提交(commit)</strong>;那么这些修改就永久地保存下来;要么数据库管理系统将放弃所作的所有修改，整个事务**回滚(rollback)**到最初状态。</li><li>为确保数据库中数据的一致性，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</li></ul><h3 id="JDBC事务处理："><a href="#JDBC事务处理：" class="headerlink" title="JDBC事务处理："></a>JDBC事务处理：</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务：</strong>每次执行一个SQL语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接,数据就会自动的提交</strong>。如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 **setAutoCommit(false);**以取消自动提交事务</li><li>在所有的SQL语句都成功执行后，调用 **commit();**方法提交事务</li><li>在出线异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><p><strong><em>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</em></strong></p><p>【例：用户AA向用户BB转账100】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public void testJDBCTransaction()&#123;</span><br><span class="line">Connection conn  &#x3D; null;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 1.获取数据库连接</span><br><span class="line">conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line">&#x2F;&#x2F; 2.开始事务</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line">&#x2F;&#x2F; 3.进行数据库操作</span><br><span class="line">String sqsl1 &#x3D; &quot;updata user_table set balance &#x3D; balance -100 where user &#x3D; ?&quot;;</span><br><span class="line">updata(conn, sql1, &quot;AA&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模拟网络异常</span><br><span class="line">&#x2F;&#x2F; System.out.println(10 &#x2F; 0);</span><br><span class="line"></span><br><span class="line">String sql2 &#x3D; &quot;updata user_table set balance &#x3D; balance + 100 where user &#x3D; ?&quot;;</span><br><span class="line">updata (conn, sql2, &quot;BB&quot;);</span><br><span class="line">&#x2F;&#x2F; 4.若没有异常，则提交事务</span><br><span class="line">conn.commit();</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#x2F;&#x2F; 5.若有异常，则回滚事务</span><br><span class="line">try&#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;catch (SQLException e1)&#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 6.恢复每次DML操作的自动提交功能</span><br><span class="line">conn.setAutoCommit(true);</span><br><span class="line">&#125;catch(SQLException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 7.关闭连接</span><br><span class="line">JDBCUtils.closeResource(conn, null, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用事务以后的通用的增删改操作</span><br><span class="line">public void updata(Connection conn, String sql, Object... args)&#123;</span><br><span class="line">PreparedStatement ps &#x3D; null;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 1.获取PreparedStatement的实例(或：预编译SQL语句)</span><br><span class="line">ps &#x3D; conn.prepareStatement(sql);</span><br><span class="line">&#x2F;&#x2F; 2.填充占位符</span><br><span class="line">for (int i &#x3D; 0;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + 1,args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 3.执行sql语句</span><br><span class="line">ps.execute();</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">&#x2F;&#x2F; 4.关闭资源</span><br><span class="line">JDBCUtils.closeResource(null,ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务的ACID属性："><a href="#事务的ACID属性：" class="headerlink" title="事务的ACID属性："></a>事务的ACID属性：</h3><ol><li><p><strong>原子性（Atomicity)：</strong></p><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></li><li><p><strong>一致性（Consistency)：</strong></p><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（lesolation)：</strong></p><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability)：</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol></li></ul><h3 id="数据库的并发问题："><a href="#数据库的并发问题：" class="headerlink" title="数据库的并发问题："></a>数据库的并发问题：</h3><ul><li>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并问题：<ul><li><strong>脏读：</strong>对于两个事务T1，T2，T1读取了已经被T2更新但还<strong>没有提交</strong>的字段。之后，若T2回滚，T1读取的内容就是临时且无效的。</li><li><strong>不可重复读：</strong>对于两个事务T1，T2，T1读取了一个字段，然后T2<strong>更新</strong>了该字段。之后，T1再次读取同一个字段，值就不同了。</li><li><strong>幻读：</strong>对于两个事务T1，T2，T1从一个表中读取了一个字段，然后T2在该表中<strong>插入</strong>了一些新的行。之后，如果T1再次读取同一个表，就会多出几行。</li></ul></li><li><strong>数据库事务的隔离性：</strong>数据库系统必须具有隔离并发运行各个事物的能力，使它们不会相影响，避免各种并发问题。</li><li>一个事务与其它事务隔离的程序称为隔离级别。数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，<strong>隔离级别越高，数据一致性越好，但并发性越弱。</strong></li></ul><h3 id="四种隔离级别："><a href="#四种隔离级别：" class="headerlink" title="四种隔离级别："></a>四种隔离级别：</h3><p><img src="/images/JDBC_1/ACID_1.png"></p><ul><li>Oracle支持的2种事务隔离级别：<strong>READ COMMITED</strong>，SERIALIZABLE。 Oracle默认的事务隔离级别为：<strong>READ COMMITED</strong>。</li><li>MySQL支持4种事务隔离级别。MySQL默认的事务隔离级别为：REPEATABLE READ。</li></ul><h4 id="在MySQL种设置隔离级别："><a href="#在MySQL种设置隔离级别：" class="headerlink" title="在MySQL种设置隔离级别："></a>在MySQL种设置隔离级别：</h4><ul><li>每启动一个mySQL程序，就会获得一个单独的数据连接，每个数据库连接都有一个全局变量<code>@@tx_isolation</code>，表示当前的事务隔离级别。</li><li>查看当前的隔离级别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECE @@tx_isolation;</span><br></pre></td></tr></table></figure><ul><li>设置当前MySQL 连接的隔离级别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set transaction isolation level read commited;</span><br></pre></td></tr></table></figure><ul><li>设置数据库系统的全局的隔离级别：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></table></figure><ul><li><p>补充操作：</p><ul><li><p>创建MySQL数据库的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by &#39;heng7&#39;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的heng用户，对所有库所有表的全部权限，密码设为heng777.</span><br><span class="line">grant all privileges on *.* to heng@&#39;%&#39;  identified by &#39;heng777&#39;; </span><br><span class="line"></span><br><span class="line"> #给heng用户使用本地命令行方式，授予idowhatido这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on idowhatido.* to heng@localhost identified by &#39;heng777&#39;; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>详细的数据库事务讲解请看另一篇文章：<a href="">https://7heng.github.io/2021/03/31/MySQL-TCL/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据库事务介绍：&quot;&gt;&lt;a href=&quot;#数据库事务介绍：&quot; class=&quot;headerlink&quot; title=&quot;数据库事务介绍：&quot;&gt;&lt;/a&gt;数据库事务介绍：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事务：&lt;/strong&gt;一组逻辑单元，使数据从一种状态变换到另一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JBDC批量插入</title>
    <link href="https://7heng.github.io/2021/04/08/JBDC%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/"/>
    <id>https://7heng.github.io/2021/04/08/JBDC%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</id>
    <published>2021-04-08T09:11:51.000Z</published>
    <updated>2021-04-08T10:17:48.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="批量插入："><a href="#批量插入：" class="headerlink" title="批量插入："></a>批量插入：</h3><p>批量执行SQL语句：当需要成批插入或者更新记录时，可以采用java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独处理更有效率。</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批处理的SQL语句或是参数</strong>。</li><li><strong>executeBatch()：执行批量处理语句</strong>。</li><li><strong>clearBatch()：清空缓存的数据</strong>。</li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理;</li><li>一个SQL语句的批量传参;</li></ul><h3 id="高效的批量插入："><a href="#高效的批量插入：" class="headerlink" title="高效的批量插入："></a>高效的批量插入：</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表，创建如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE goods&#123;</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实现层次一：使用Statement"><a href="#实现层次一：使用Statement" class="headerlink" title="实现层次一：使用Statement"></a>实现层次一：使用Statement</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">Statement st &#x3D; conn.createStatement();</span><br><span class="line">for(int i &#x3D; 1;i &lt;&#x3D; 20000;i++)&#123;</span><br><span class="line">String sql &#x3D; &quot;insert into goods(name) values(&#39;name_&#39; + &quot;+ i +&quot;)&quot;;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现层次二：使用PreparedStatement"><a href="#实现层次二：使用PreparedStatement" class="headerlink" title="实现层次二：使用PreparedStatement"></a>实现层次二：使用PreparedStatement</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">long start &#x3D; System.currentTimeMillis();</span><br><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line">&#x2F;&#x2F; sql插入语句，值用占位符替代</span><br><span class="line">String sql &#x3D; &quot;insert into goods(name)values(?)&quot;;</span><br><span class="line">PreparedStatement ps &#x3D; conn.preparedStatement(sql);</span><br><span class="line">for(int i &#x3D;1;i &lt;&#x3D;20000;i++)&#123;</span><br><span class="line">ps.setString(1,&quot;name_&quot; + i);</span><br><span class="line">ps.executeUpdata();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long end &#x3D; System.currenTimeMillis();</span><br><span class="line">System.out.println(&quot;花费的时间为：&quot; + (end - start));</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h4 id="实现层次三："><a href="#实现层次三：" class="headerlink" title="实现层次三："></a>实现层次三：</h4><p>修改1：使用addBatch()  /  executeBatch()  /  clearBatch()</p><p>修改2：mysql服务器默认是关闭处理的，我们需要通过一个参数，让mysql开启批处理的支持。</p><ul><li> ?rewriteBatchedStatements=true 写在配置文件的url后面</li></ul><p>修改3：使用更新的 mysql 驱动,mysql-connector-java-5.1.37-bin.jar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void tsteInsert1() throws Exception&#123;</span><br><span class="line">long start &#x3D; System.currenTimeMillis();</span><br><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line">&#x2F;&#x2F; sql插入语句，值用占位符替代</span><br><span class="line">String sql &#x3D; &quot;insert into goods(name)values(?)&quot;;</span><br><span class="line">PreparedStatement ps &#x3D; conn.preparedStatement(sql);</span><br><span class="line"></span><br><span class="line">for(int i &#x3D; 1;i &lt;&#x3D; 1000000;i++)&#123;</span><br><span class="line">ps.setString(1,&quot;name_&quot; + i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1：&quot;攒&quot;sql</span><br><span class="line">ps.addBatch();</span><br><span class="line">if(i % 500 &#x3D;&#x3D; 0)&#123;</span><br><span class="line">&#x2F;&#x2F; 2：执行</span><br><span class="line">ps.executeBatch();</span><br><span class="line">&#x2F;&#x2F; 3：清空</span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">long end &#x3D; System.currentTimellis();</span><br><span class="line">System.out.println(&quot;花费的时间为：&quot; + (end - start));&#x2F;&#x2F; 20000条：6251000000条：14733</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭</span><br><span class="line">JDBCUtils.closeResource(conn,ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现层次四："><a href="#实现层次四：" class="headerlink" title="实现层次四："></a>实现层次四：</h4><ul><li>在层次三的的基础上操作</li><li>使用Connection 的 setAutoCommit (false）/ commit()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testInsert2() throws Exception&#123;</span><br><span class="line">long start &#x3D; System.currentTimeMillis();</span><br><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.设置为不自动提交数据</span><br><span class="line">conn.setAutoCommit(false);</span><br><span class="line">&#x2F;&#x2F; sql插入语句，值用占位符填充</span><br><span class="line">String sql &#x3D; &quot;insert into goods(name)values(?)&quot;;</span><br><span class="line">PreparedStatement ps &#x3D; conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">for(int i &#x3D; 1;i &lt;&#x3D; 1000000;i++)&#123;</span><br><span class="line">ps.setString(1, &quot;name_&quot; + i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.“攒”sql</span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line">if(i % 500 &#x3D;&#x3D; 0)&#123;</span><br><span class="line">&#x2F;&#x2F;2.执行</span><br><span class="line">ps.executeBatch();</span><br><span class="line">&#x2F;&#x2F;3.清空</span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.提交数据</span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line">long end &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.println(&quot;花费的时间为：&quot; + (end - start));&#x2F;&#x2F;1000000条:4978 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;批量插入：&quot;&gt;&lt;a href=&quot;#批量插入：&quot; class=&quot;headerlink&quot; title=&quot;批量插入：&quot;&gt;&lt;/a&gt;批量插入：&lt;/h3&gt;&lt;p&gt;批量执行SQL语句：当需要成批插入或者更新记录时，可以采用java的批量更新机制，这一机制允许多条语句一次性提交给数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDBC操作Blob类型</title>
    <link href="https://7heng.github.io/2021/04/08/JDBC%E6%93%8D%E4%BD%9CBlob%E7%B1%BB%E5%9E%8B/"/>
    <id>https://7heng.github.io/2021/04/08/JDBC%E6%93%8D%E4%BD%9CBlob%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-04-08T08:26:32.000Z</published>
    <updated>2021-04-08T09:11:03.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL-BLOB类型："><a href="#MySQL-BLOB类型：" class="headerlink" title="MySQL BLOB类型："></a>MySQL BLOB类型：</h3><ul><li>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</li><li>插入BLOB类型的数据必须使用PrepareStatement，因为BLOB类型的数据无法使用字符串拼写。</li><li>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</li></ul><p><img src="/images/JDBC_1/Blob_1.png"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的Blob类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数：<strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动Mysql服务。</li></ul><h3 id="向数据表中插入大数据类型："><a href="#向数据表中插入大数据类型：" class="headerlink" title="向数据表中插入大数据类型："></a>向数据表中插入大数据类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; sql插入语句，值用占位符替代</span><br><span class="line">String sql &#x3D; &quot;insert into customer(name,emial,birth,photo)values(?,?,?,?)&quot;;</span><br><span class="line">PreparedStatement ps &#x3D; conn.prepareStaement(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 填充占位符</span><br><span class="line">ps.setString(1,&quot;路飞&quot;);</span><br><span class="line">ps.setString(2,&quot;Cy7heng@163.com&quot;);</span><br><span class="line">ps.setData(3,new Data(new java.util.Data.getTime()));</span><br><span class="line">&#x2F;&#x2F;操作Bolb类型的变量</span><br><span class="line">FileInputStream fis &#x3D; new FileInputStream(&quot;Suolong.PNG&quot;);</span><br><span class="line">ps.setBlob(4,fis);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">ps.execute();</span><br><span class="line">&#x2F;&#x2F;关闭</span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.CloseResource(conn,ps);</span><br></pre></td></tr></table></figure><h3 id="修改数据表中的Blob类型字段："><a href="#修改数据表中的Blob类型字段：" class="headerlink" title="修改数据表中的Blob类型字段："></a>修改数据表中的Blob类型字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取连接</span><br><span class="line">Connection conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; sql更新语句，值用占位符替代 </span><br><span class="line">String sql &#x3D; &quot;update customer set photo &#x3D; ? where id &#x3D; ?&quot;;</span><br><span class="line">PreparedStatement ps &#x3D; conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 填充占位符</span><br><span class="line">&#x2F;&#x2F; 操作Blob类型的变量</span><br><span class="line">FileInputStream fis &#x3D; new FileInputStream(&quot;luobin.png&quot;);</span><br><span class="line">ps.setBlob(1,fis);</span><br><span class="line">ps.setInt(2,25);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行</span><br><span class="line">ps.execute();</span><br><span class="line">&#x2F;&#x2F; 关闭</span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn,ps);</span><br></pre></td></tr></table></figure><h3 id="从数据表读取大量数据类型："><a href="#从数据表读取大量数据类型：" class="headerlink" title="从数据表读取大量数据类型："></a>从数据表读取大量数据类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">String sql &#x3D; &quot;SELECT id, name, email, birth, photo From customer WHERE id &#x3D; ?&quot;;</span><br><span class="line">conn &#x3D; getConnection();</span><br><span class="line">ps &#x3D; conn.prepareStatement(sql);</span><br><span class="line">ps setInt(1,8);</span><br><span class="line">rs &#x3D; ps.executeQuery();</span><br><span class="line">if(rs.next())&#123;</span><br><span class="line">Integer id &#x3D; rs.getInt(1);</span><br><span class="line">    String name &#x3D; rs.getString(2);</span><br><span class="line">String email &#x3D; rs.getString(3);</span><br><span class="line">    Date birth &#x3D; rs.getDate(4);</span><br><span class="line">Customer cust &#x3D; new Customer(id, name, email, birth);</span><br><span class="line">    System.out.println(cust);</span><br><span class="line">    &#x2F;&#x2F; 读取Blob类型的字段</span><br><span class="line">    Blob photo &#x3D; rs.getBlob(5);</span><br><span class="line">InputStream is &#x3D; photo.getBinaryStream();</span><br><span class="line">OutputStream os &#x3D; new FileOutputStream(&quot;c.jpg&quot;);</span><br><span class="line">    byte [] buffer &#x3D; new bytr[1024];</span><br><span class="line">    int len &#x3D; 0;</span><br><span class="line">    while((len &#x3D; is.read(buffer)) !&#x3D; -1)&#123;</span><br><span class="line">    os.write(buffer,0,len);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 关闭</span><br><span class="line">    JDBCUtils.closeResource(conn,ps,rs);</span><br><span class="line">    </span><br><span class="line">    if(is !&#x3D; null)&#123;</span><br><span class="line">    is.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(os !&#x3D; null)&#123;</span><br><span class="line">    os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MySQL-BLOB类型：&quot;&gt;&lt;a href=&quot;#MySQL-BLOB类型：&quot; class=&quot;headerlink&quot; title=&quot;MySQL BLOB类型：&quot;&gt;&lt;/a&gt;MySQL BLOB类型：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL中，BLOB是一个二进制大型对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TCP协议</title>
    <link href="https://7heng.github.io/2021/04/07/TCP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://7heng.github.io/2021/04/07/TCP%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-04-07T10:37:47.000Z</published>
    <updated>2021-04-07T12:54:43.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传输控制协议-Transmission-Control-Protocol-即TCP）应用场景："><a href="#传输控制协议-Transmission-Control-Protocol-即TCP）应用场景：" class="headerlink" title="传输控制协议(Transmission Control Protocol 即TCP）应用场景："></a>传输控制协议(Transmission Control Protocol 即TCP）应用场景：</h3><ul><li>应用程序要传输的报文大，就要分段传输，每段封装成一个数据包，在接收端将分段组装成完整的报文。</li><li>应用层协议需要交互多次。</li><li>功能：可靠传输（丢包自动重传、在接收端排序、流量控制、拥塞避免）。</li></ul><h3 id="用户数据包协议-User-Datagram-Protocol-即UDP）应用场景："><a href="#用户数据包协议-User-Datagram-Protocol-即UDP）应用场景：" class="headerlink" title="用户数据包协议(User Datagram Protocol 即UDP）应用场景："></a>用户数据包协议(User Datagram Protocol 即UDP）应用场景：</h3><ul><li>就是应用程序传输的报文小，不需要分段。</li><li>应用程序之间不需要多次交互。</li><li>屏幕广播软件、不可靠传输。</li><li>实时通信。</li></ul><h3 id="Tcp功能和首部："><a href="#Tcp功能和首部：" class="headerlink" title="Tcp功能和首部："></a>Tcp功能和首部：</h3><ul><li>Tcp为应用层协议提供可靠的的传输，在应用程序通信之间需要建立Tcp连接，客户端程序和服务端程序使用建立的Tcp连接实现双向通信，在通信过程Tcp实现可靠传输、流量控制、网络拥塞控制自动感知等功能，应用程序通信结束后，再释放Tcp连接。</li><li>Netstat -n 可以查看建立的的Tcp连接。</li></ul><h3 id="Tcp功能："><a href="#Tcp功能：" class="headerlink" title="Tcp功能："></a>Tcp功能：</h3><p>Tcp为应用程序通信提供可靠传输。在通信过程中实现以下功能：</p><ul><li>建立连接：在正式传输数据之前先建立Tcp连接，协商一些参数，比如告诉对方自己的接收缓存多大(单位：字节)，一个段最多承载多少自己的数据，是否支持选择性确认(SACK)。</li><li>可靠传输：发送端将文件以字节流的形式放入发送端缓存，接收端以字节流的形式从缓存读取。数据包丢失，超时后发送端会自动重传，没按顺序到达，会在接收端缓存排序。</li><li>拥塞避免：这整个通信过程网络有可能拥塞也有可能畅通，发送端开始发送数据时先感知网络是否拥堵，调整发送速度。</li><li>流量控制：如果发送端发送过块，接收端的应用程序有可能来不及从接收缓存读取数据，造成接收缓存满。接收端接收数据过程中可以告诉发送端发送快一点还是慢一点，是否需要暂停一会儿。</li><li>释放连接：发送完毕，还要告诉对方发送完毕，等对方收到确认才释放连接。</li></ul><h3 id="Tcp首部："><a href="#Tcp首部：" class="headerlink" title="Tcp首部："></a>Tcp首部：</h3><p><img src="/images/Tcp/TcpHead.png"></p><h3 id="序号和确认号的作用："><a href="#序号和确认号的作用：" class="headerlink" title="序号和确认号的作用："></a>序号和确认号的作用：</h3><p><img src="/images/Tcp/Tcp_1.png"></p><h3 id="Tcp流工作过程："><a href="#Tcp流工作过程：" class="headerlink" title="Tcp流工作过程："></a>Tcp流工作过程：</h3><p><img src="/images/Tcp/Tcp_2.png"></p><ul><li>最前面三个是建立Tcp连接的数据包，这三个数据包包含参数。Tcp连接建立后，可以实现全双工通信。POP使用该连接接收电子邮件，接收完毕后就要释放Tcp连接。最后四个数据包是释放Tcp连接的数据包。可以看到使用该连接邮件客户端可以向邮件服务器发送请求，邮件服务器也可以向客户端发送响应，不需要建立两个Tcp连接。</li></ul><h3 id="Tcp建立连接数据包："><a href="#Tcp建立连接数据包：" class="headerlink" title="Tcp建立连接数据包："></a>Tcp建立连接数据包：</h3><p><img src="/images/Tcp/Tcp_3.png"></p><ul><li>应用程序客户端向服务端程序发起请求，客户端计算机向服务端计算机发送建立Tcp连接的请求。</li><li>第3个数据包是客户端向服务器发送的第一个数据包，请求连接的数据包的特征：SYN（同步）标记位为1，ACK（确认）标记位为0，(意味着ACK无效，但WireShark上看到是0，因为这是客户端向服务器发送的第一个数据包，所以序号为0（seq=0）)。</li><li>该数据包Tcp首部的选项部分，指明客户端支持的最大报文段长度(Maximum Segment Size，MSS)和允许选择确认(Selective Acknowledgment，SACK)，连接请求数据包没有数据部分。</li></ul><h3 id="Tcp连接确认数据包："><a href="#Tcp连接确认数据包：" class="headerlink" title="Tcp连接确认数据包："></a>Tcp连接确认数据包：</h3><p><img src="/images/Tcp/Tcp_4.png"></p><ul><li>确认连接数据包的特征：SYN（同步）标记位为1，ACK（确认）标记位为1，这是服务器向客户端发送的第一个数据包，所以序号为0（seq=0),服务器收到了客户端的请求（seq=0),确认已经收到，发送的确认号为1，选项部分指明服务器支持的最大报文段长度（MSS）为1460。</li></ul><h3 id="Tcp连接确认的确认数据包："><a href="#Tcp连接确认的确认数据包：" class="headerlink" title="Tcp连接确认的确认数据包："></a>Tcp连接确认的确认数据包：</h3><p><img src="/images/Tcp/Tcp_5.png"></p><ul><li>客户端收到服务器的确认后，还需要向服务器发送一个确认，我们称之为确认的确认。这个确认数据包和以后通信的数据包，ACK标记位为1，SYN标记位为0。</li></ul><h3 id="建立Tcp连接的过程："><a href="#建立Tcp连接的过程：" class="headerlink" title="建立Tcp连接的过程："></a>建立Tcp连接的过程：</h3><p><img src="/images/Tcp/Tcp_6.png"></p><h4 id="两次握手会出现的问题："><a href="#两次握手会出现的问题：" class="headerlink" title="两次握手会出现的问题："></a>两次握手会出现的问题：</h4><ul><li>假如客户端以一条路径给服务端发送了一个请求，没等服务端返回连接确认又给服务端以另一条路径发送了第二个请求，服务端发回了第二个请求的确认，但如果此时服务端接收到了请求一，再发送请求一的确认，客户端将会忽略请求一的确认，而服务端则会等待客户端返回请求一的确认，因此服务端和客户端会互相一直等待。</li></ul><h4 id="三次握手解决问题："><a href="#三次握手解决问题：" class="headerlink" title="三次握手解决问题："></a>三次握手解决问题：</h4><ul><li>客户端给服务端会多发送一次确认的确认，例如上述两次握手，如果客户端一直没给服务端发确认的确认，服务端等待过后则会将请求一释放，不会造成一直等待的现象。</li></ul><h3 id="可靠传输的实现"><a href="#可靠传输的实现" class="headerlink" title="可靠传输的实现:"></a>可靠传输的实现:</h3><ul><li>Tcp发送的报文段是交给网络层传送的，我们知道，网络层只是尽最大努力将数据包发送到目的地，不考虑网络是否堵塞，数据包是否丢失。这就需要Tcp采取适当的措施才能使发送端和接收端之间的通信变得可靠。</li></ul><h3 id="Tcp可靠传输的实现-停止等待协议："><a href="#Tcp可靠传输的实现-停止等待协议：" class="headerlink" title="Tcp可靠传输的实现-停止等待协议："></a>Tcp可靠传输的实现-停止等待协议：</h3><p><img src="/images/Tcp/Tcp_7.png"></p><p><img src="/images/Tcp/Tcp_8.png"></p><ul><li>发送一个等待接收一个，超时则重传。</li><li>超时重传收到同样的数据包，丢弃发重复的，重新确认。</li><li>超时重传收到超时的数据确认包，收下但什么也不做。</li></ul><h3 id="连续ARQ协议和滑动窗口协议-改进的停止等待协议："><a href="#连续ARQ协议和滑动窗口协议-改进的停止等待协议：" class="headerlink" title="连续ARQ协议和滑动窗口协议-改进的停止等待协议："></a>连续ARQ协议和滑动窗口协议-改进的停止等待协议：</h3><p><img src="/images/Tcp/Tcp_9.png"></p><ul><li><p>窗口分组，直接发送一个窗口，收到确认则发送下一个窗口。</p></li><li><p><strong>连续ARQ：</strong>一个窗口里含有多个组，每次一个窗口会将多个组连续发送。</p></li><li><p><strong>滑动窗口：</strong>发送一个窗口等待时，窗口滑动到下一个多组。</p></li></ul><h4 id="以字节为单位的滑动窗口技术详解："><a href="#以字节为单位的滑动窗口技术详解：" class="headerlink" title="以字节为单位的滑动窗口技术详解："></a>以字节为单位的滑动窗口技术详解：</h4><p><img src="/images/Tcp/Tcp_10.png"></p><p><img src="/images/Tcp/Tcp_11.png"></p><h3 id="Tcp连接释放："><a href="#Tcp连接释放：" class="headerlink" title="Tcp连接释放："></a>Tcp连接释放：</h3><p><img src="/images/Tcp/Tcp_12.png"></p><ul><li>连接和关闭都是客户端发送请求。</li><li>Client–&gt;Server：客户端发送关闭连接，客户端变为FIN-WAIT-1状态。</li><li>Server–&gt;Client：服务端发送连接，变成CLOSE-WAIT状态。</li><li>Server–&gt;Client：CLOSE-WAIT被动关闭后向客户端发送连接，变成LAST-ACK状态。</li><li>Client–&gt;Server：客户端发送连接变成TIME-WAIT状态，服务端收到连接变成CLOSED关闭连接状态，客户端等待2MSL(2倍最长报文时间)后变成CLOSED关闭连接状态。</li></ul><p><strong>TIME-WAIT的意义：</strong></p><ul><li>如果最后Client–&gt;Server发送的连接丢失，Server向Client发送连接，Client必须是TIME-WAIT状态才能收到，如果是CLOSED状态，则无法收到，将会导致服务端一直无法关闭。所以Client会存在TIME-WAIT状态等待2MSL（2倍最长报文时间）来避免出现此错误。</li></ul><h3 id="Tcp连接状态："><a href="#Tcp连接状态：" class="headerlink" title="Tcp连接状态："></a>Tcp连接状态：</h3><p>下面是每一个TCP连接在任意时刻可能处于的状态，在Linux下可以在 <strong>netstat</strong>命令的最后一列（State列）里看到。</p><p>各个状态的含义如下：</p><ul><li><strong>CLOSED</strong> ：初始状态，表示TCP连接是“关闭着的”或“未打开的”。</li><li><strong>LISTEN</strong> ：表示服务器端的某个SOCKET处于监听状态，可以接受客户端的连接。</li><li><strong>SYN_RCVD</strong> ：表示接收到了SYN报文。在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat很难看到这种状态，除非故意写一个监测程序，将三次TCP握手过程中最后一个ACK报文不予发送。当TCP连接处于此状态时，再收到客户端的ACK报文，它就会进入到ESTABLISHED 状态。</li><li><strong>SYN_SENT</strong> ：这个状态与SYN_RCVD 状态相呼应，当客户端SOCKET执行connect()进行连接时，它首先发送SYN报文，然后随即进入到SYN_SENT 状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT 状态表示客户端已发送SYN报文。</li><li><strong>ESTABLISHED</strong> ：表示TCP连接已经成功建立。</li><li><strong>FIN_WAIT_1</strong> ：这个状态得好好解释一下，其实FIN_WAIT_1 和FIN_WAIT_2 两种状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET进入到FIN_WAIT_1 状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2 状态。当然在实际的正常情况下，无论对方处于任何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1 状态一般是比较难见到的，而FIN_WAIT_2 状态有时仍可以用netstat看到。</li><li><strong>FIN_WAIT_2</strong> ：上面已经解释了这种状态的由来，实际上FIN_WAIT_2状态下的SOCKET表示半连接，即有一方调用close()主动要求关闭连接。注意：FIN_WAIT_2 是没有超时的（不像TIME_WAIT 状态），这种状态下如果对方不关闭（不配合完成4次挥手过程），那这个 FIN_WAIT_2 状态将一直保持到系统重启，越来越多的FIN_WAIT_2 状态会导致内核crash。</li><li><strong>TIME_WAIT</strong> ：表示收到了对方的FIN报文，并发送出了ACK报文。 TIME_WAIT状态下的TCP连接会等待2*MSL（Max Segment Lifetime，最大分段生存期，指一个TCP报文在Internet上的最长生存时间。每个具体的TCP协议实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟，但BSD传统实现采用了30秒，Linux可以cat/proc/sys/net/ipv4/tcp_fin_timeout看到本机的这个值），然后即可回到CLOSED 可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</li><li><strong>CLOSING</strong> ：这种状态在实际情况中应该很少见，属于一种比较罕见的例外状态。正常情况下，当一方发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING 状态表示一方发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？那就是当双方几乎在同时close()一个SOCKET的话，就出现了双方同时发送FIN报文的情况，这是就会出现CLOSING 状态，表示双方都正在关闭SOCKET连接。</li><li><strong>CLOSE_WAIT</strong> ：表示正在等待关闭。怎么理解呢？当对方close()一个SOCKET后发送FIN报文给自己，你的系统毫无疑问地将会回应一个ACK报文给对方，此时TCP连接则进入到CLOSE_WAIT状态。接下来呢，你需要检查自己是否还有数据要发送给对方，如果没有的话，那你也就可以close()这个SOCKET并发送FIN报文给对方，即关闭自己到对方这个方向的连接。有数据的话则看程序的策略，继续发送或丢弃。简单地说，当你处于CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</li><li><strong>LAST_ACK</strong> ：当被动关闭的一方在发送FIN报文后，等待对方的ACK报文的时候，就处于LAST_ACK 状态。当收到对方的ACK报文后，也就可以进入到CLOSED 可用状态了。</li></ul><h3 id="释放Tcp连接的四个数据包："><a href="#释放Tcp连接的四个数据包：" class="headerlink" title="释放Tcp连接的四个数据包："></a>释放Tcp连接的四个数据包：</h3><p><img src="/images/Tcp/Tcp_13.png"></p><h3 id="抓包分析Tcp可靠传输的实现："><a href="#抓包分析Tcp可靠传输的实现：" class="headerlink" title="抓包分析Tcp可靠传输的实现："></a>抓包分析Tcp可靠传输的实现：</h3><p><strong>快重传：</strong></p><p><img src="/images/Tcp/Tcp_14.png"></p><h3 id="网速对确认频率的影响："><a href="#网速对确认频率的影响：" class="headerlink" title="网速对确认频率的影响："></a>网速对确认频率的影响：</h3><p><strong>网速慢，接收端确认频率提高。</strong></p><p><img src="/images/Tcp/Tcp_15.png"></p><h3 id="小Tips："><a href="#小Tips：" class="headerlink" title="小Tips："></a>小Tips：</h3><p>在Tcp的协议下，会存在一些Network attack。</p><ul><li><strong>SYN攻击：</strong>攻击者向服务端发送一个不是本机的的源IP地址去请求连接，服务端去向源IP地址的客户端发送确认请求，并等待确认请求的确认，但是源IP地址的客户端并未给服务端发送过请求连接，因此不会发送确认的确认请求连接。但攻击者会模拟大量的伪IP地址给服务端让它去获取IP地址的确认的确认请求连接，此时服务端会变得非常繁忙，占用大量的CPU资源，从而造成宕机的情况。</li><li><strong>Land攻击：</strong>攻击者以服务端的IP为源IP一直向服务端发送请求，导致服务端会向自己一直发送确认，从而造成CPU资源大量被占用，造成宕机的情况。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;传输控制协议-Transmission-Control-Protocol-即TCP）应用场景：&quot;&gt;&lt;a href=&quot;#传输控制协议-Transmission-Control-Protocol-即TCP）应用场景：&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDBC实现CURD操作</title>
    <link href="https://7heng.github.io/2021/04/04/JDBC%E5%AE%9E%E7%8E%B0CURD%E6%93%8D%E4%BD%9C/"/>
    <id>https://7heng.github.io/2021/04/04/JDBC%E5%AE%9E%E7%8E%B0CURD%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-04T07:41:52.000Z</published>
    <updated>2021-04-05T07:09:35.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用PreparedStatement实现CRUD操作："><a href="#使用PreparedStatement实现CRUD操作：" class="headerlink" title="使用PreparedStatement实现CRUD操作："></a>使用PreparedStatement实现CRUD操作：</h2><h3 id="操作和访问数据库："><a href="#操作和访问数据库：" class="headerlink" title="操作和访问数据库："></a><strong>操作和访问数据库：</strong></h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和sql语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在java.sql包中有3个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态sql语句并返回它所生成结果的对象。</li><li>PrepartedStatement：SQL语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallbleStatement：用于执行SQL存储过程。</li></ul><p><img src="/images/JDBC_1/Curd.png"></p></li></ul><h4 id="使用Statment操作数据表的弊端："><a href="#使用Statment操作数据表的弊端：" class="headerlink" title="使用Statment操作数据表的弊端："></a>使用Statment操作数据表的弊端：</h4><ul><li>通过调用Connection对象的createStatement()方法创建该对象。该对象用于执行静态的SQL语句，并且返回执行过程。</li><li>Statment 接口中定义了下列方法用于执行SQL语句：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int excuteUpdate(String sql)：执行更新操作INSERT、UPDATE、DELETE</span><br><span class="line">ResultSet executeQuery(String sql)：执行查询操作SELECT</span><br></pre></td></tr></table></figure><ul><li><p>但是使用Staement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong>。</li><li><strong>问题二：存在SQL注入问题</strong>。</li></ul></li><li><p>SQL注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’)，从而利用系统的SQL引擎完成恶意行为的做法。</p></li><li><p>对于java而言，要防范SQL注入，只要用PreparedStatement(从Statment扩展而来)取代Statement就可以了。</p></li><li><p>代码演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">public class StatmentTest&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 Statment的弊端：需要拼写sql语句，并且存在SQL注入的问题。</span><br><span class="line">@Test</span><br><span class="line">public void testLogin()&#123;</span><br><span class="line">Scanner scan &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(&quot;用户名：&quot;);</span><br><span class="line">String userName &#x3D; scan.mextLine();</span><br><span class="line">System.out.print(&quot;密 码&quot;);</span><br><span class="line">String password &#x3D; scan.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; SELECT user.password FROM user_table WHERE USER &#x3D; &#39;1&#39; or &#39;AND&#39; PASSWORD &#x3D; &#39;&#x3D;&#39;1&#39; or &#39;1&#39; &#x3D; &#39;1&#39;;</span><br><span class="line">        String sql &#x3D; &quot;SELECT user,password FROM user_table WHERE USER &#x3D; &#39;&quot; + userName + &quot;&#39; AND PASSWORD &#x3D; &#39;&quot; + password + &quot;&#39;&#39;&quot;;</span><br><span class="line">        User user &#x3D; get(sql,User.class);</span><br><span class="line">        if (user !&#x3D; null)&#123;</span><br><span class="line">        System.out.println(&quot;登录成功&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        System.out.println(&quot;用户名或密码错误!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用Statement实现对数据表的查询条件</span><br><span class="line">public &lt;T&gt;T get(String sql,Class&lt;T&gt; calzz)&#123;</span><br><span class="line">T t &#x3D; null;</span><br><span class="line"></span><br><span class="line">Connection conn null;</span><br><span class="line">Statment st &#x3D; null;</span><br><span class="line">ResultSet rs &#x3D; null;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 1.加载配置文件</span><br><span class="line">InputStream is &#x3D; StatmentTest.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">Properties pros &#x3D; new Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.读取配置信息</span><br><span class="line">String user &#x3D; pros.getProperty(&quot;user&quot;);</span><br><span class="line">String password &#x3D; pro.getProperty(&quot;password&quot;);</span><br><span class="line">String url &#x3D; pros.getProperty(&quot;url&quot;);</span><br><span class="line">String driverClass &#x3D; pros.getProperty(&quot;driverClass&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.加载驱动</span><br><span class="line">Class。forName(driverClass);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.获取连接</span><br><span class="line">conn &#x3D; DriverManger.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">st &#x3D; conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs &#x3D; st.executeQury(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取结果集的元数据</span><br><span class="line">ResultSetMetaDate rsmd &#x3D; rs.getMetaData();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取结果集的列数</span><br><span class="line">int columnCount &#x3D; rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">t &#x3D; clazz.newInstance();</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; columnCount; i++) &#123;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F;1. 获取列的名称</span><br><span class="line">&#x2F;&#x2F; String columnName &#x3D; rsmd.getColumnName(i+1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. 获取列的别名</span><br><span class="line">String columnName &#x3D; rsmd.getColumnLabel(i + 1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. 根据列名获取对应数据表中的数据</span><br><span class="line">Object columnVal &#x3D; rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3. 将数据表中得到的数据，封装进对象</span><br><span class="line">Field field &#x3D; clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 关闭资源</span><br><span class="line">if (rs !&#x3D; null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (st !&#x3D; null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (conn !&#x3D; null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>综上：</p><p><img src="/images/JDBC_1/Curd1.png"></p></li></ul><h4 id="PreparedStatment的使用："><a href="#PreparedStatment的使用：" class="headerlink" title="PreparedStatment的使用："></a>PreparedStatment的使用：</h4><p><strong>PreparedStatment介绍：</strong></p><ul><li>可以通过调用Connection对象的preparedStatement(String sql)方法获取 PreparedStatement对象。</li><li><strong>PreparedStatment 接口是 Statement 的子接口，它表示一条编译过的 SQL 语句。</strong></li><li>PreparedStatement 对象所代表的SQL语句中的参数用问号(?)来表示，调用PreparedStatement对象的 setXxx() 方法来设置这些参数，setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数值。</li></ul><h4 id="PreparedStatement-VS-Statement"><a href="#PreparedStatement-VS-Statement" class="headerlink" title="PreparedStatement  VS  Statement  :"></a>PreparedStatement  VS  Statement  :</h4><ul><li>代码的可读性和可维护性。</li><li><strong>PreparedStatement 能最大可能提高性能：</strong><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>(语法检查、语义检查、翻译成二进制命令，缓存)</li></ul></li><li>PreparedStatement 可以防止 SQL 注入。</li></ul><h4 id="java与SQL对应数据类型转换表："><a href="#java与SQL对应数据类型转换表：" class="headerlink" title="java与SQL对应数据类型转换表："></a>java与SQL对应数据类型转换表：</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="使用PreparedStatement实现增、删、改操作："><a href="#使用PreparedStatement实现增、删、改操作：" class="headerlink" title="使用PreparedStatement实现增、删、改操作："></a>使用PreparedStatement实现增、删、改操作：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通用的增删、删、改操作 (体现一：增、删、改。体现二：针对不同的表)</span><br><span class="line">public void update(String sql,Obkect ... args)&#123;</span><br><span class="line">Connection conn &#x3D; null;</span><br><span class="line">PreparedStatement ps &#x3D; null;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 1.获取数据库的连接</span><br><span class="line">conn - JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.获取PreparedStament的实例（或预编译sql语句）</span><br><span class="line">ps &#x3D; conn.PrepareStatment(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.填充占位符</span><br><span class="line">for(int i &#x3D; 0;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + 1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.执行sql语句</span><br><span class="line">ps.execyte();</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">pe.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">&#x2F;&#x2F; 5.关闭资源</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用PreparedStatement实现查询操作："><a href="#使用PreparedStatement实现查询操作：" class="headerlink" title="使用PreparedStatement实现查询操作："></a>使用PreparedStatement实现查询操作：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通用的针对于不同表的查询：返回一个对象 (Version 1.0)</span><br><span class="line">public &lt;T&gt; T getInstance(Class&lt;T&gt; clazz, String sql, Object ... args)&#123;</span><br><span class="line">Connection conn &#x3D; null;</span><br><span class="line">PreparedStatment ps &#x3D; null;</span><br><span class="line">ResultSet rs &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 1.获取数据库的连接</span><br><span class="line">conn &#x3D; conn.preparedStatement(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.预编译sql语句，得到PreparedStatement对象。</span><br><span class="line">ps &#x3D; conn.prepareStatemtnt(sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.填充占位符</span><br><span class="line">for (int i &#x3D; 0; i &lt; args.length; i++)&#123;</span><br><span class="line">ps.setObject(i + 1, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.执行excuterQuery(),得到结果集，ResultSet。</span><br><span class="line">rs &#x3D; ps.executeQuery();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 5.得到结果集的元数据：ResultSetMetaData。</span><br><span class="line">ResultSetMetaData rsmd &#x3D; rs.getMetaData();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值。</span><br><span class="line">int columnCount &#x3D; rsmd.getColumnCount();</span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line">T t &#x3D; clazz.newInstance();</span><br><span class="line">for (int i &#x3D; 0; i &lt; columnCount; i++) &#123;&#x2F;&#x2F; 遍历每一个列</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取列值</span><br><span class="line">Object columnVal &#x3D; rs.getObject(i + 1);</span><br><span class="line">&#x2F;&#x2F; 获取列的别名:列的别名，使用类的属性名充当</span><br><span class="line">String columnLabel &#x3D; rsmd.getColumnLabel(i + 1);</span><br><span class="line">&#x2F;&#x2F; 6.2使用反射，给对象的相应属性赋值</span><br><span class="line">Field field &#x3D; clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 7.关闭资源</span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入的问题。</span><br></pre></td></tr></table></figure><h4 id="ResultSet与ResuleSetMetaData"><a href="#ResultSet与ResuleSetMetaData" class="headerlink" title="ResultSet与ResuleSetMetaData:"></a>ResultSet与ResuleSetMetaData:</h4><h5 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet:"></a>ResultSet:</h5><ul><li><p>查询需要掉用PreparedStatment的 executeQury() 方法，查询结果是一个ResuleSet对象</p></li><li><p>ResultSet对象以逻辑表格的形式封装了执行数据库操作的结果集，RsultSet 接口由数据厂商提供实现。</p></li><li><p>ResultSet 返回的实际上就是一张数据表，有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之间，可以通过ResultSet 对象的 next() 方法移动到下一行。调用next()方法检测下一行是否有效。若有效，该方法返回true，且指针下移，相当于lterator对象的hashNext()和next()方法的结合体。</p></li><li><p>当指针指向一行时，可以通过调用getXxx(int index)或getXxx(int columnName)获取每一列的值。</p><ul><li>例如：getlnt(1)，getString(“name”)</li><li>注意：java与数据库交互涉及到相关的java API 中的索引都从1开始。</li></ul></li><li><p>ResuletSet 接口的常用方法：</p><ul><li>boolean next()</li><li>getString()</li><li>…</li></ul><p><img src="/images/JDBC_1/Result"></p></li></ul><h5 id="ResultSetMetaData"><a href="#ResultSetMetaData" class="headerlink" title="ResultSetMetaData:"></a>ResultSetMetaData:</h5><ul><li>可用于获取关于ResultSet 对象中列的类型和属性信息的对象</li><li>ResultSetMetaData meta = rs.getMetaData();<ul><li><strong>getColumnName</strong>(int column)： 获取指定列的名称。</li><li><strong>getColumnLabel</strong>(int column)：获取指定列的别名</li><li>getColumnTypeName(int column)：获取指定列的数据库特定的类型名称。</li><li>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。</li><li><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为null。</li><li>isAutolncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</li></ul></li></ul><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><p>1：<strong>得到结果后，如何知道该结果集中有那些列？列名是什么？</strong></p><ul><li>需要使用一个描述ResultSet 的对象，即ResultSetMetData。</li></ul><p>2：<strong>关于ResultSetMetaData:</strong></p><ul><li><p><strong>如何获取 ResultSetMetaData：</strong>调用ResultSet 的 getMetaData() 方法即可。</p></li><li><p><strong>获取ResultSet 中 有多少列：</strong>调用ResultSetMetaData 的 getColumnCount() 方法。</p></li><li><p><strong>获取 ResultSet 每一列的列的别名是什么：</strong>调用ResultSetMetaData 的getColumnLable() 方法。</p></li></ul><p>3：<strong>资源的释放：</strong></p><ul><li>释放ResultSet，Statement，Connection。</li><li>数据库的连接(Connection)是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早释放</strong>。</li><li>可以在finally中关闭，保证即使其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="JDBC-API小结："><a href="#JDBC-API小结：" class="headerlink" title="JDBC API小结："></a>JDBC API小结：</h3><ul><li><p>两种思想：</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类。</li><li>表中的一条记录对应java类的一个对象。</li><li>表中的一个字段对应java类的一个属性。</li></ul><p>sql是需要结合列名和表名的属性名来写。注意起别名。</p></li></ul></li><li><p>两种技术：</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用PreparedStatement实现CRUD操作：&quot;&gt;&lt;a href=&quot;#使用PreparedStatement实现CRUD操作：&quot; class=&quot;headerlink&quot; title=&quot;使用PreparedStatement实现CRUD操作：&quot;&gt;&lt;/a&gt;使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JDBC获取数据库连接</title>
    <link href="https://7heng.github.io/2021/04/03/JDBC%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>https://7heng.github.io/2021/04/03/JDBC%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</id>
    <published>2021-04-03T13:11:58.000Z</published>
    <updated>2021-04-04T07:10:23.209Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一：Driver接口实现类"><a href="#一：Driver接口实现类" class="headerlink" title="一：Driver接口实现类"></a>一：Driver接口实现类</h6><p><strong>Driver接口介绍：</strong></p><ul><li><p>java.sql.Driver接口时所有JDBC驱动程序需要实现的接口，这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了Driver接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：Oracle.jdbc.driver.OracleDriver</li><li>mysql的驱动：com.mysql.jdbc.Driver</li></ul></li></ul><h6 id="二：加载与注册JDBC驱动"><a href="#二：加载与注册JDBC驱动" class="headerlink" title="二：加载与注册JDBC驱动"></a>二：加载与注册JDBC驱动</h6><ul><li><p>加载驱动：加载JDBC驱动需要调用Class类的静态方法forName(),向其传递要加载的JDBC驱动的类名</p><ul><li>Class.forName(“com.mysql.jdbc.Driver”);</li></ul></li><li><p>注册驱动：DriverManager类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显示调用DriverManager类的registerDriver()方法来注册驱动程序类的实例，因为Driver接口的驱动程序类都包含了静态代码块，在这个静态代码块中，会调用DriverManager.registerDriver()方法来注册自身的一个实例，下图是MySQL的Driver实现类的源码：</p><p><img src="/images/JDBC_1/Driver.png"></p></li></ul></li></ul><h6 id="三：URL"><a href="#三：URL" class="headerlink" title="三：URL"></a>三：URL</h6><ul><li>JDBC URL用于标识一个被注册的驱动程序，驱动程序管理器通过这个URL选择正确的驱动程序，从而建立到数据库的连接。</li><li>JDBC URL的标准由三部分组成，各部分间用冒号分隔。<ul><li><strong>jdbc:子协议：子名称</strong></li><li><strong>协议：</strong>JDBC URL中的协议总是jdbc</li><li><strong>子协议：</strong>子协议用于标识一个数据库驱动程序</li><li><strong>子名称：</strong>一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息，包含主机名(对应服务端的ip地址)，<strong>端口号</strong>，<strong>数据库名</strong>。</li></ul></li></ul><p><img src="/images/JDBC_1/URL.png"></p><ul><li><p>几种常用数据库的JDBC URL</p><p>MySQL的连接URL编写方式：</p><ul><li><p>jdbc:mysql://主机名称:mysql服务端口号/数据库名称？参数=值&amp;参数=值</p></li><li><p>jdbc:mysql://localhost:3306/7heng</p></li><li><p>jdbc:mysql://localhost:3306/7heng?useUnicode=true&amp;characterEncoding=utf8（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</p></li><li><p>jdbc:mysql://locahost:3306/7heng?user=root&amp;password=7777777</p></li><li><p>Oracle9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口：数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:7heng</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</li><li>jdbc:sqlserver://localhost:1433:DatabaseName=7heng</li></ul></li></ul></li></ul><h6 id="四：用户名和密码："><a href="#四：用户名和密码：" class="headerlink" title="四：用户名和密码："></a>四：用户名和密码：</h6><ul><li>user,password可以用”属性名=属性值”方式告诉数据库。</li><li>可以调用DriverManger类的getConnection()方法建立到数据库的连接。</li></ul><p><strong>数据库连接方式举例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">连接方式一：</span><br><span class="line">@Test</span><br><span class="line">public void testConnectionl()&#123;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;1：提供java.sql.Driver接口实现类的对象</span><br><span class="line">Driver driver &#x3D; null;</span><br><span class="line">driver &#x3D; new com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2：提供url，指明具体操作的数据</span><br><span class="line">String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3:提供Properties的对象，指明用户名和密码</span><br><span class="line">Properties info &#x3D; new Properties();</span><br><span class="line">info.setProperty(&quot;user&quot;,&quot;root&quot;);</span><br><span class="line">info.setProperty(&quot;password&quot;,&quot;7777777&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4:调用driver的connect(),获取连接</span><br><span class="line">Connerction conn &#x3D; driver.conner(url.info);</span><br><span class="line"></span><br><span class="line">System.out,println(conn);</span><br><span class="line">&#125;catch(SQLException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：上述代码中显示出现了第三方数据的API</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">连接方式二：</span><br><span class="line">@Test</span><br><span class="line">public void testConnection2()&#123;</span><br><span class="line">​try&#123;</span><br><span class="line">&#x2F;&#x2F;1.实例化Driver</span><br><span class="line">Sting ClassName &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">Class clazz &#x3D; Class.forName(className);</span><br><span class="line">Driver driver &#x3D; (Driver)clazz.newInstance();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.提供url,指明具体操作的数据</span><br><span class="line">String url &#x3D; &quot;jdbc:&#x2F;&#x2F;mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3。提供url,指明具体操作的数据</span><br><span class="line">Properties info &#x3D; new Properties();</span><br><span class="line">info.setProperty(&quot;user&quot;,&quot;root&quot;);</span><br><span class="line">info.setProperty(&quot;password&quot;,&quot;ccc7&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.调用driver的connect().获取连接</span><br><span class="line">Connection conn &#x3D; driver.connect(url,info);</span><br><span class="line">System.out.println(conn);</span><br><span class="line"></span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">e,printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：相较于方式一，这里使用反射实例化Driver,不在代码中体现第三方数据库的API,体现了面向接口编程的思想。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">连接方式三：</span><br><span class="line">@Test</span><br><span class="line">public void testConnection3()&#123;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F;1.数据库连接的4个基本要素：</span><br><span class="line">String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;</span><br><span class="line">String user &#x3D; &quot;root&quot;;</span><br><span class="line">String password &#x3D; &quot;ccc7&quot;;</span><br><span class="line">String driverName &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.实例化Driver</span><br><span class="line">Class clazz &#x3D; clazz.forName(driverName);</span><br><span class="line">Driver driver &#x3D; (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.注册驱动</span><br><span class="line">DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.获取连接</span><br><span class="line">Connection conn &#x3D; DriverManager.getConnection(url,user,password);</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：使用DriverManager实现数据库的连接，体会获取连接必要的4个基本要素。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">连接方式四：</span><br><span class="line">@Test</span><br><span class="line">public void testConnection4()&#123;</span><br><span class="line">try&#123;</span><br><span class="line">&#x2F;&#x2F; 1.数据库连接的4个基本要素：</span><br><span class="line">String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;</span><br><span class="line">String user &#x3D; &quot;root&quot;;</span><br><span class="line">String passwprd &#x3D; &quot;ccc7&quot;;</span><br><span class="line">String driverName &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.加载驱动（①实例化Driver ②注册驱动）</span><br><span class="line">class.forName(driverName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Driver driver &#x3D; (Driver) clazz.newInstance();</span><br><span class="line">        &#x2F;&#x2F; 3.注册驱动</span><br><span class="line">        &#x2F;&#x2F;DriverManager.registerDriver(driver);</span><br><span class="line">        &#x2F;*</span><br><span class="line">        可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span><br><span class="line">        static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DriverManager.registerDriver(new Driver());</span><br><span class="line">            &#125; catch (SQLException var1) &#123;</span><br><span class="line">                throw new RuntimeException(&quot;Can&#39;t register driver!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        *&#x2F;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 3.获取连接</span><br><span class="line">        Connection conn &#x3D; DriverManager.getConnection(url,user,password);</span><br><span class="line">        System.out.println(conn);    </span><br><span class="line">&#125; catch(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">连接方式五(完结版!)：</span><br><span class="line">@Test</span><br><span class="line">public void testConnection5() throws Exception&#123;</span><br><span class="line">&#x2F;&#x2F; 1.加载配置文件</span><br><span class="line">InputStream is &#x3D; </span><br><span class="line">ConnectionTest.Class.getClassLoader(). getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">Properties pros &#x3D; new Properties();</span><br><span class="line">    pros.load(is);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 2.读取配置信息</span><br><span class="line">    String user &#x3D; pros.getProperty(&quot;user&quot;);</span><br><span class="line">    String password &#x3D; pros.getProperty(&quot;password&quot;);</span><br><span class="line">    String url &#x3D; pros.getProperty(&quot;url&quot;);</span><br><span class="line">    String driverClass &#x3D; pros.getProperty(&quot;driverClass&quot;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 3.加载驱动</span><br><span class="line">    Class.forName(driverClass);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 4.获取连接</span><br><span class="line">    Connection conn &#x3D; DriverManager.getConnection(url,user,passwprd);</span><br><span class="line">    System.out.println(conn);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其中，配置文件声明在工程的src目录下：【jdbc.properties】</span><br><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;abc123</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">driverClass&#x3D;com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">说明：使用配置文件的方式保存配置信息，在代码中加载配置文件。</span><br><span class="line">使用配置文件的好处：</span><br><span class="line">①：实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码。</span><br><span class="line">②：如果修改了配置信息，省去重新编译的过程。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;一：Driver接口实现类&quot;&gt;&lt;a href=&quot;#一：Driver接口实现类&quot; class=&quot;headerlink&quot; title=&quot;一：Driver接口实现类&quot;&gt;&lt;/a&gt;一：Driver接口实现类&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;Driver接口介绍：&lt;/stron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL流程控制</title>
    <link href="https://7heng.github.io/2021/04/03/MySQL%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://7heng.github.io/2021/04/03/MySQL%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-04-03T06:55:23.000Z</published>
    <updated>2021-04-03T07:41:05.928Z</updated>
    
    <content type="html"><![CDATA[<p>流程控制结构：<strong>顺序、分支、循环</strong></p><h6 id="if函数："><a href="#if函数：" class="headerlink" title="if函数："></a>if函数：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if函数：</span><br><span class="line">语法：if(条件，值1，值2)</span><br><span class="line">功能：实现双分支</span><br><span class="line">特点：应用在任何位置</span><br></pre></td></tr></table></figure><h6 id="case语句："><a href="#case语句：" class="headerlink" title="case语句："></a>case语句：</h6><p><strong>特点：可以用在任何位置。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">情况一：类似于switch</span><br><span class="line">case 表达式</span><br><span class="line">when 值1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 值2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br><span class="line"></span><br><span class="line">情况二：类似于多重if</span><br><span class="line">case </span><br><span class="line">when 条件1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 条件2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br></pre></td></tr></table></figure><h6 id="if-elseif语句："><a href="#if-elseif语句：" class="headerlink" title="if-elseif语句："></a>if-elseif语句：</h6><p><strong>特点：只能用在begin end中！！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">if 条件1 then 语句1;</span><br><span class="line">elseif 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end if;</span><br><span class="line"></span><br><span class="line">功能：类似于多重if</span><br><span class="line">只能应用在begin end 中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">例1：创建函数，实现传入成绩，如果成绩&gt;90,返回A,如果成绩&gt;80,返回B,如果成绩＞60，返回C，否则返回D。</span><br><span class="line">CREATE FUNCTION test_if(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE ch CHAR DEFAULT &#39;A&#39;;</span><br><span class="line">IF score&gt;90 THEN SET ch&#x3D;&#39;A&#39;;</span><br><span class="line">ELSEIF score&gt;80 THEN SET ch&#x3D;&#39;B&#39;;</span><br><span class="line">ELSEIF score&gt;60 THEN SET ch&#x3D;&#39;C&#39;;</span><br><span class="line">ELSE SET ch&#x3D;&#39;D&#39;;</span><br><span class="line">END IF;</span><br><span class="line">RETURN ch;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_if(87)$</span><br><span class="line"></span><br><span class="line">例2：创建存储过程，如果工资&lt;2000,则删除，如果5000&gt;工资&gt;2000,则涨工资1000，否则涨工资500</span><br><span class="line">CREATE PROCEDURE test_if_pro(IN sal DOUBLE)</span><br><span class="line">BEGIN</span><br><span class="line">IF sal&lt;2000 THEN DELETE FROM employees WHERE employees.salary&#x3D;sal;</span><br><span class="line">ELSEIF sal&gt;&#x3D;2000 AND sal&lt;5000 THEN UPDATE employees SET salary&#x3D;salary+1000 WHERE employees.&#96;salary&#96;&#x3D;sal;</span><br><span class="line">ELSE UPDATE employees SET salary&#x3D;salary+500 WHERE employees.&#96;salary&#96;&#x3D;sal;</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_if_pro(2100)$</span><br><span class="line"></span><br><span class="line">例3：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span><br><span class="line">CREATE FUNCTION test_case(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN </span><br><span class="line">DECLARE ch CHAR DEFAULT &#39;A&#39;;</span><br><span class="line"></span><br><span class="line">CASE </span><br><span class="line">WHEN score&gt;90 THEN SET ch&#x3D;&#39;A&#39;;</span><br><span class="line">WHEN score&gt;80 THEN SET ch&#x3D;&#39;B&#39;;</span><br><span class="line">WHEN score&gt;60 THEN SET ch&#x3D;&#39;C&#39;;</span><br><span class="line">ELSE SET ch&#x3D;&#39;D&#39;;</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">RETURN ch;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_case(56)$</span><br></pre></td></tr></table></figure><h6 id="三者比较："><a href="#三者比较：" class="headerlink" title="三者比较："></a>三者比较：</h6><table><thead><tr><th align="center"></th><th align="center">应用场合</th></tr></thead><tbody><tr><td align="center">if函数</td><td align="center">简单双分支（任意位置）</td></tr><tr><td align="center">case结构</td><td align="center">等值判断的多分支（任意位置）</td></tr><tr><td align="center">if结构</td><td align="center">区间判断的多分支（begin end中）</td></tr></tbody></table><h6 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h6><p>分类：while、loop、repeat</p><h6 id="循环控制："><a href="#循环控制：" class="headerlink" title="循环控制："></a>循环控制：</h6><p>iterate类似于 continue，继续，结束本次循环，继续下一次<br>leave 类似于  break，跳出，结束当前所在的循环</p><h6 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只能放在BEGIN END里面</span><br><span class="line">如果要搭配leave跳转语句，需要使用标签，否则可以不用标签</span><br><span class="line">leave类似于java中的break语句，跳出所在循环！！！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"># while</span><br><span class="line">语法：</span><br><span class="line">【标签】while 循环条件 do</span><br><span class="line">循环体;</span><br><span class="line">end while【标签】;</span><br><span class="line"></span><br><span class="line">类似于java：</span><br><span class="line">while(循环条件)&#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># loop</span><br><span class="line">语法：</span><br><span class="line">【标签】loop</span><br><span class="line">循环体;</span><br><span class="line">end loop【标签】;</span><br><span class="line"></span><br><span class="line">可以用来模拟简单的死循环。</span><br><span class="line"></span><br><span class="line"># repeat</span><br><span class="line">语法：</span><br><span class="line">【标签】repeat</span><br><span class="line">循环体;</span><br><span class="line">while 结束循环的条件</span><br><span class="line">end repeat【标签】;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 没有添加循环控制语句：</span><br><span class="line">例1：批量插入，根据次数插入到admin表中多条记录</span><br><span class="line">DROP PROCEDURE pro_while1$</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">WHILE i&lt;&#x3D;insertCount DO</span><br><span class="line">INSERT INTO admin(username,&#96;password&#96;) VALUES(CONCAT(&#39;Rose&#39;,i),&#39;666&#39;);</span><br><span class="line">SET i&#x3D;i+1;</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100)$</span><br><span class="line"></span><br><span class="line"># 添加leave语句</span><br><span class="line">例：批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20则停止</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while1$</span><br><span class="line">CREATE PROCEDURE test_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">a:WHILE i&lt;&#x3D;insertCount DO</span><br><span class="line">INSERT INTO admin(username,&#96;password&#96;) VALUES(CONCAT(&#39;xiaohua&#39;,i),&#39;0000&#39;);</span><br><span class="line">IF i&gt;&#x3D;20 THEN LEAVE a;</span><br><span class="line">END IF;</span><br><span class="line">SET i&#x3D;i+1;</span><br><span class="line">END WHILE a;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while1(100)$</span><br><span class="line"></span><br><span class="line"># 添加iterate语句</span><br><span class="line">例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次</span><br><span class="line">TRUNCATE TABLE admin$</span><br><span class="line">DROP PROCEDURE test_while1$</span><br><span class="line">CREATE PROCEDURE test_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">a:WHILE i&lt;&#x3D;insertCount DO</span><br><span class="line">SET i&#x3D;i+1;</span><br><span class="line">IF MOD(i,2)!&#x3D;0 THEN ITERATE a;</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">INSERT INTO admin(username,&#96;password&#96;) VALUES(CONCAT(&#39;xiaohua&#39;,i),&#39;0000&#39;);</span><br><span class="line"></span><br><span class="line">END WHILE a;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_while1(100)$</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">已知表stringcontent</span><br><span class="line">其中字段：</span><br><span class="line">id 自增长</span><br><span class="line">content varchar(20)</span><br><span class="line">向该表插入指定个数的，随机的字符串</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS stringcontent;</span><br><span class="line">CREATE TABLE stringcontent(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">content VARCHAR(20)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE test_randstr_insert(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">DECLARE str VARCHAR(26) DEFAULT &#39;abcdefghijklmnopqrstuvwxyz&#39;;</span><br><span class="line">DECLARE startIndex INT;#代表初始索引</span><br><span class="line">DECLARE len INT;#代表截取的字符长度</span><br><span class="line">WHILE i&lt;&#x3D;insertcount DO</span><br><span class="line">SET startIndex&#x3D;FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26</span><br><span class="line">SET len&#x3D;FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-（20-startIndex+1）</span><br><span class="line">INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));</span><br><span class="line">SET i&#x3D;i+1;</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_randstr_insert(10)$</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;流程控制结构：&lt;strong&gt;顺序、分支、循环&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;if函数：&quot;&gt;&lt;a href=&quot;#if函数：&quot; class=&quot;headerlink&quot; title=&quot;if函数：&quot;&gt;&lt;/a&gt;if函数：&lt;/h6&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL函数</title>
    <link href="https://7heng.github.io/2021/04/03/MySQL%E5%87%BD%E6%95%B0/"/>
    <id>https://7heng.github.io/2021/04/03/MySQL%E5%87%BD%E6%95%B0/</id>
    <published>2021-04-03T04:30:20.000Z</published>
    <updated>2021-04-03T06:54:44.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h2><p>含义：一组预先编译好的sql语句的集合，理解成批处理语句</p><p>1：提高代码的重用性</p><p>2：简化操作</p><p>3：减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</p><h6 id="函数和存储过程的区别："><a href="#函数和存储过程的区别：" class="headerlink" title="函数和存储过程的区别："></a>函数和存储过程的区别：</h6><p>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新。</p><p>函数：有且仅有1个返回，适合做处理数据后返回一个结果。</p><h6 id="创建语法："><a href="#创建语法：" class="headerlink" title="创建语法："></a>创建语法：</h6><p><code>CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型</code></p><p><code>BEGIN</code></p><p><code>函数体</code></p><p><code>END</code></p><p>注意：</p><p>1：参数列表包含两部分：</p><p>参数名 参数类型</p><p>2：函数体：肯定会有return语句，如果没有也不会报错</p><p>如果return语句没有放在函数体的最后也不会爆粗，但不建议。</p><p>return值：</p><p>3：函数体中仅有一句话，则可以省略begin end</p><p>4：使用 delimiter语句设置标记结束</p><h6 id="调用语法："><a href="#调用语法：" class="headerlink" title="调用语法："></a>调用语法：</h6><p><code>SELECT 函数名(参数列表)</code></p><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">无参有返回</span><br><span class="line">例1：返回公司的员工个数</span><br><span class="line">CREATE FUNCTION myf1() RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE c INT DEFAULT 0;#定义局部变量</span><br><span class="line">SELECT COUNT(*) INTO c      #赋值</span><br><span class="line">FROM employees;</span><br><span class="line">RETURN c;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf1()$</span><br><span class="line"></span><br><span class="line">有参有返回：</span><br><span class="line">2：根据员工名，返回它的工资</span><br><span class="line">CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">SET @sal&#x3D;0;#定义用户变量 </span><br><span class="line">SELECT salary INTO @sal   #赋值</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; empName;</span><br><span class="line"></span><br><span class="line">RETURN @sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf2(&#39;k_ing&#39;) $</span><br><span class="line"></span><br><span class="line">3：根据部门名，返回该部门的平均工资</span><br><span class="line">CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE sal DOUBLE ;</span><br><span class="line">SELECT AVG(salary) INTO sal</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d ON e.department_id &#x3D; d.department_id</span><br><span class="line">WHERE d.department_name&#x3D;deptName;</span><br><span class="line">RETURN sal;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT myf3(&#39;IT&#39;)</span><br><span class="line"></span><br><span class="line">查看函数：</span><br><span class="line">SHOW CREATE FUNCTION myf3;</span><br><span class="line"></span><br><span class="line">删除函数：</span><br><span class="line">DROP FUNCTION myf3;</span><br><span class="line"></span><br><span class="line">例：创建函数，实现传入两个float，返回二者之和</span><br><span class="line">CREATE FUNCTION test_fun1(num1 FLOAT,num2 FLOAT) RETURNS FLOAT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE SUM FLOAT DEFAULT 0;</span><br><span class="line">SET SUM&#x3D;num1+num2;</span><br><span class="line">RETURN SUM;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_fun1(1,2)$</span><br></pre></td></tr></table></figure><h6 id="调用函数："><a href="#调用函数：" class="headerlink" title="调用函数："></a>调用函数：</h6><p><code>SELECT 函数名 (实参列表)</code></p><h6 id="函数和存储过程的区别：-1"><a href="#函数和存储过程的区别：-1" class="headerlink" title="函数和存储过程的区别："></a>函数和存储过程的区别：</h6><table><thead><tr><th align="center"></th><th align="center">关键字</th><th align="center">调用语法</th><th align="center">返回值</th><th align="center">应用场景</th></tr></thead><tbody><tr><td align="center">函数</td><td align="center">FUNCTION</td><td align="center">SELECT 函数()</td><td align="center">只能是一个</td><td align="center">一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</td></tr><tr><td align="center">存储过程</td><td align="center">PROCEDURE</td><td align="center">CALL 存储过程()</td><td align="center">可以有0个或多个</td><td align="center">一般用于更新</td></tr></tbody></table><h6 id="字符函数："><a href="#字符函数：" class="headerlink" title="字符函数："></a>字符函数：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">concat 拼接</span><br><span class="line"></span><br><span class="line">substr 截取子串</span><br><span class="line"></span><br><span class="line">upper 转换成大写</span><br><span class="line"></span><br><span class="line">lower 转换成小写</span><br><span class="line"></span><br><span class="line">trim 去掉前后自定的空格和字符</span><br><span class="line"></span><br><span class="line">ltrim 去掉左边空格</span><br><span class="line"></span><br><span class="line">rtrim 去掉右边空格</span><br><span class="line"></span><br><span class="line">replace 替换</span><br><span class="line"></span><br><span class="line">lpad 左填充</span><br><span class="line"></span><br><span class="line">rpad 右填充</span><br><span class="line"></span><br><span class="line">instr 返回子串第一次出现的索引</span><br><span class="line"></span><br><span class="line">length 获取字节个数</span><br></pre></td></tr></table></figure><h6 id="数组函数："><a href="#数组函数：" class="headerlink" title="数组函数："></a><strong>数组函数：</strong></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">round 四舍五入</span><br><span class="line"></span><br><span class="line">rand 随机数</span><br><span class="line"></span><br><span class="line">ceil 向上取整</span><br><span class="line"></span><br><span class="line">floor 向下取整</span><br><span class="line"></span><br><span class="line">mod 取余()</span><br><span class="line"></span><br><span class="line">truncate 截断</span><br></pre></td></tr></table></figure><h6 id="日期函数："><a href="#日期函数：" class="headerlink" title="日期函数："></a><strong>日期函数：</strong></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">now 当前系统日期+时间</span><br><span class="line"></span><br><span class="line">curdate 当前系统日期</span><br><span class="line"></span><br><span class="line">curtime 当前系统时间</span><br><span class="line"></span><br><span class="line">str_to_date 将字符串转换成日期</span><br><span class="line"></span><br><span class="line">data_format 将日期转换成字符</span><br></pre></td></tr></table></figure><h6 id="分组函数："><a href="#分组函数：" class="headerlink" title="分组函数："></a>分组函数：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sum 求和</span><br><span class="line">max 最大值</span><br><span class="line">min 最小值</span><br><span class="line">avg 平均值</span><br><span class="line">count 计数</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1：以上五个分组函数都忽略null值，除了count(*)</span><br><span class="line">2：sum和avg一般用于处理数值型。</span><br><span class="line">   max、min、count可以处理任何数据类型</span><br><span class="line">3：都可以搭配distinct使用，用于统计去重后的结果</span><br><span class="line">4：count的参数可以支持(建议使用*)：</span><br><span class="line">字段、*、常量值，一般放1</span><br></pre></td></tr></table></figure><h6 id="流程控制函数："><a href="#流程控制函数：" class="headerlink" title="流程控制函数："></a>流程控制函数：</h6><h6 id="if函数："><a href="#if函数：" class="headerlink" title="if函数："></a>if函数：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF (10&lt;5, &#39;大&#39; , &#39;小&#39;)；</span><br><span class="line"></span><br><span class="line">SELECT last_name,commission_pct,IF(commission_pct IS NULL,&#39;没奖金，呵呵&#39;,&#39;有奖金，嘻嘻&#39;) 备注</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h6 id="case函数："><a href="#case函数：" class="headerlink" title="case函数："></a>case函数：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">case函数的使用一：</span><br><span class="line"></span><br><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1;</span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">例：查询员工的工资，要求</span><br><span class="line">部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示的工资为元工资</span><br><span class="line"></span><br><span class="line">SELECT salary 原始工资,department_id,</span><br><span class="line">CASE department_id</span><br><span class="line">WHEN 30 THEN salary*1.1</span><br><span class="line">WHEN 40 THEN salary*1.2</span><br><span class="line">WHEN 50 THEN salary*1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END AS 新工资</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">case函数的使用二：类似于 多重if</span><br><span class="line"></span><br><span class="line">case </span><br><span class="line">when 条件1 then 要显示的值1或语句1</span><br><span class="line">when 条件2 then 要显示的值2或语句2</span><br><span class="line">。。。</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">例：查询员工的工资的情况</span><br><span class="line">如果工资&gt;20000,显示A级别</span><br><span class="line">如果工资&gt;15000,显示B级别</span><br><span class="line">如果工资&gt;10000,显示C级别</span><br><span class="line">否则，显示D级别</span><br><span class="line"></span><br><span class="line">SELECT salary</span><br><span class="line">CASE</span><br><span class="line">WHEN salary&gt;20000 THEN &#39;A&#39;</span><br><span class="line">WHEN salary&gt;15000 THEN &#39;B&#39;</span><br><span class="line">WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">ELSE &#39;D&#39;</span><br><span class="line">END AS 工资级别</span><br><span class="line">FROM emplyees;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数：&quot;&gt;&lt;a href=&quot;#函数：&quot; class=&quot;headerlink&quot; title=&quot;函数：&quot;&gt;&lt;/a&gt;函数：&lt;/h2&gt;&lt;p&gt;含义：一组预先编译好的sql语句的集合，理解成批处理语句&lt;/p&gt;
&lt;p&gt;1：提高代码的重用性&lt;/p&gt;
&lt;p&gt;2：简化操作&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL存储过程</title>
    <link href="https://7heng.github.io/2021/04/03/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://7heng.github.io/2021/04/03/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2021-04-03T01:46:24.000Z</published>
    <updated>2021-04-03T02:31:58.603Z</updated>
    
    <content type="html"><![CDATA[<p><strong>存储过程：</strong></p><p>含义：一组预先编译好的SQL语句的集合，理解或批处理语句。</p><p>1：提高代码的重用性。</p><p>2：简化操作。</p><p>3：减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</p><p><strong>分类：</strong></p><p>1、无返回无参<br>2、仅仅带in类型，无返回有参<br>3、仅仅带out类型，有返回无参<br>4、既带in又带out，有返回有参<br>5、带inout，有返回有参<br>注意：in、out、inout都可以在一个存储过程中带多个</p><p><strong>好处：</strong></p><p>1：提高代码的重用性。</p><p>2：简化操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">创建语法：</span><br><span class="line">CREATE PROCEDURE 存储过程名(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">​存储过程体(一组合法的SQL语句)</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">注意：需要设置新的结束标记</span><br><span class="line">delimiter 新的结束标记</span><br><span class="line">示例：</span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)</span><br><span class="line">BEGIN</span><br><span class="line">sql语句1;</span><br><span class="line">sql语句2;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">调用存储过程：</span><br><span class="line">call 存储过程名(实参列表)</span><br></pre></td></tr></table></figure><p>注意：</p><p>1：参数列表包含三部分：参数模式、参数名、参数类型</p><p>举例：in    stuname     varchar(20）</p><p>参数模式：</p><p>in：该参数可以作为输入，也就是该参数需要调用方法传入值。</p><p>out：该参数可以作为输出，也就是该参数可以作为返回值。</p><p>inout：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值。</p><p>2：如果存储过程中仅仅只有一句话，begin end可以省略。</p><p>存储过程体中的每条sql语句的结尾要求必须加分号。</p><p>存储过程的结尾可以使用 delimiter 重新设置。</p><p>语法：<code>delimiter 结束标记</code></p><p>例：<code>delimiter $</code></p><p>调用语法：<code>CALL 存储过程名(实参列表);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">例1：空参列表，插入到admin表中五条记录。</span><br><span class="line">CREATE PROCEDURE myp1()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">​INSERT INTO admin(username,&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">​VALUES(&#39;xiuyi&#39;,&#39;0000&#39;),(&#39;kenan&#39;,&#39;0000&#39;), (&#39;anshitou&#39;,&#39;0000&#39;),(&#39;you&#39;,&#39;0000&#39;),(&#39;kakaxi&#39;,&#39;0000&#39;);</span><br><span class="line"></span><br><span class="line">END $;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL mypl()$;</span><br><span class="line"></span><br><span class="line">2：创建带in模式参数的存储过程</span><br><span class="line">创建存储过程实现，根据女神名，查询对应得男神信息。</span><br><span class="line">CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">WHERE b.name&#x3D;beautyName;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用：</span><br><span class="line">CALL myp2(&#39;贝尔摩德&#39;)$</span><br><span class="line"></span><br><span class="line">3：创建存储过程实现，用户是否登录成功</span><br><span class="line">CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE result INT DEFAULT 0;#声明并初始化</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) INTO result#赋值</span><br><span class="line">FROM admin</span><br><span class="line">WHERE admin.username &#x3D; username</span><br><span class="line">AND admin.password &#x3D; PASSWORD;</span><br><span class="line"></span><br><span class="line">SELECT IF(result&gt;0,&#39;成功&#39;,&#39;失败&#39;);#使用</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp3(&#39;秀一&#39;,&#39;8888&#39;)$</span><br><span class="line"></span><br><span class="line">4：创建out 模式参数的存储过程</span><br><span class="line">根据输入的女神名，返回对应的男神名</span><br><span class="line">CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT bo.boyname INTO boyname</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT JOIN</span><br><span class="line">beauty b ON b.boyfriend_id &#x3D; bo.id</span><br><span class="line">WHERE b.name&#x3D;beautyName ;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">5：根据输入的女神名，返回对应的男神名和魅力值</span><br><span class="line">CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) </span><br><span class="line">BEGIN</span><br><span class="line">SELECT boys.boyname ,boys.usercp INTO boyname,usercp</span><br><span class="line">FROM boys </span><br><span class="line">RIGHT JOIN</span><br><span class="line">beauty b ON b.boyfriend_id &#x3D; boys.id</span><br><span class="line">WHERE b.name&#x3D;beautyName ;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用：</span><br><span class="line">CALL myp7(&#39;鸣人&#39;,@name,@cp)$</span><br><span class="line">SELECT @name,@cp$</span><br><span class="line"></span><br><span class="line">6：创建带inout模式参数的存储过程</span><br><span class="line">传入a和b两个值，最终a和b都翻倍并返回</span><br><span class="line">CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)</span><br><span class="line">BEGIN</span><br><span class="line">SET a&#x3D;a*2;</span><br><span class="line">SET b&#x3D;b*2;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">SET @m&#x3D;10$</span><br><span class="line">SET @n&#x3D;20$</span><br><span class="line">CALL myp8(@m,@n)$</span><br><span class="line">SELECT @m,@n$</span><br><span class="line"></span><br><span class="line">删除存储过程</span><br><span class="line">语法：drop procedure 存储过程名</span><br><span class="line">DROP PROCEDURE p1;√</span><br><span class="line">DROP PROCEDURE p2,p3;×</span><br><span class="line"></span><br><span class="line">查看存储过程的信息</span><br><span class="line">DESC myp2;×</span><br><span class="line">SHOW CREATE PROCEDURE  myp2;  √</span><br></pre></td></tr></table></figure><h6 id="存储过程例题："><a href="#存储过程例题：" class="headerlink" title="存储过程例题："></a>存储过程例题：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#一、创建存储过程实现传入用户名和密码，插入到admin表中</span><br><span class="line">CREATE PROCEDURE test_pro1(IN username VARCHAR(20),IN loginPwd VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO admin(admin.username,PASSWORD)</span><br><span class="line">VALUES(username,loginpwd);</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#二、创建存储过程实现传入女神编号，返回女神名称和女神电话</span><br><span class="line">CREATE PROCEDURE test_pro2(IN id INT,OUT NAME VARCHAR(20),OUT phone VARCHAR(20))</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">SELECT b.name ,b.phone INTO NAME,phone</span><br><span class="line">FROM beauty b</span><br><span class="line">WHERE b.id &#x3D; id;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#三、创建存储存储过程或函数实现传入两个女神生日，返回大小</span><br><span class="line">CREATE PROCEDURE test_pro3(IN birth1 DATETIME,IN birth2 DATETIME,OUT result INT)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT DATEDIFF(birth1,birth2) INTO result;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#四、创建存储过程或函数实现传入一个日期，格式化成xx年xx月xx日并返回</span><br><span class="line">CREATE PROCEDURE test_pro4(IN mydate DATETIME,OUT strDate VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT DATE_FORMAT(mydate,&#39;%y年%m月%d日&#39;) INTO strDate;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro4(NOW(),@str)$</span><br><span class="line">SELECT @str $</span><br><span class="line"></span><br><span class="line">#五、创建存储过程或函数实现传入女神名称，返回：女神 and 男神  格式的字符串</span><br><span class="line">如 传入 ：小昭</span><br><span class="line">返回： 小昭 AND 张无忌</span><br><span class="line">DROP PROCEDURE test_pro5 $</span><br><span class="line">CREATE PROCEDURE test_pro5(IN beautyName VARCHAR(20),OUT str VARCHAR(50))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT CONCAT(beautyName,&#39; and &#39;,IFNULL(boyName,&#39;null&#39;)) INTO str</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT JOIN beauty b ON b.boyfriend_id &#x3D; bo.id</span><br><span class="line">WHERE b.name&#x3D;beautyName;</span><br><span class="line"></span><br><span class="line">SET str&#x3D;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro5(&#39;柳岩&#39;,@str)$</span><br><span class="line">SELECT @str$</span><br><span class="line"></span><br><span class="line">#六、创建存储过程或函数，根据传入的条目数和起始索引，查询beauty表的记录</span><br><span class="line">DROP PROCEDURE test_pro6$</span><br><span class="line">CREATE PROCEDURE test_pro6(IN startIndex INT,IN size INT)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT * FROM beauty LIMIT startIndex,size;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_pro6(3,5)$</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;存储过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;含义：一组预先编译好的SQL语句的集合，理解或批处理语句。&lt;/p&gt;
&lt;p&gt;1：提高代码的重用性。&lt;/p&gt;
&lt;p&gt;2：简化操作。&lt;/p&gt;
&lt;p&gt;3：减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL变量</title>
    <link href="https://7heng.github.io/2021/04/03/MySQL%E5%8F%98%E9%87%8F/"/>
    <id>https://7heng.github.io/2021/04/03/MySQL%E5%8F%98%E9%87%8F/</id>
    <published>2021-04-03T00:38:24.000Z</published>
    <updated>2021-04-03T01:45:04.466Z</updated>
    
    <content type="html"><![CDATA[<h6 id="系统变量："><a href="#系统变量：" class="headerlink" title="系统变量："></a>系统变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局变量</span><br><span class="line">会话变量。</span><br></pre></td></tr></table></figure><h6 id="自定义变量："><a href="#自定义变量：" class="headerlink" title="自定义变量："></a>自定义变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户变量</span><br><span class="line">局部变量。</span><br></pre></td></tr></table></figure><h6 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量:"></a>系统变量:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">说明：变量由系统定义，不是用户定义，属于服务器层面</span><br><span class="line">注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别。</span><br><span class="line">使用步骤：</span><br><span class="line"></span><br><span class="line">1：查看所有系统变量</span><br><span class="line">show global |【session】 variables;</span><br><span class="line"></span><br><span class="line">2：查看满足条件的部分系统变量</span><br><span class="line">show global |【session】 variables like &#39;%char%&#39;;</span><br><span class="line"></span><br><span class="line">3：查看指定的系统变量的值</span><br><span class="line">select @@global |【session】 系统变量名;</span><br><span class="line"></span><br><span class="line">4：为某个系统变量赋值</span><br><span class="line">方式一：</span><br><span class="line">set global |【session】 系统变量名&#x3D;值;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">set @@global |【session】系统变量名&#x3D;值;</span><br></pre></td></tr></table></figure><h6 id="全局变量："><a href="#全局变量：" class="headerlink" title="全局变量："></a>全局变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用域：针对于所有会话（连接）有效，但不能跨重启</span><br><span class="line"></span><br><span class="line">例1：查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line">2：查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line"></span><br><span class="line">3：查看指定的系统变量的值</span><br><span class="line">SELECT @@global.autocommit;</span><br><span class="line"></span><br><span class="line">4：为某个系统变量赋值</span><br><span class="line">SET @@global.autocommit&#x3D;0;</span><br><span class="line">SET GLOBAL autocommit&#x3D;0;</span><br></pre></td></tr></table></figure><h6 id="会话变量："><a href="#会话变量：" class="headerlink" title="会话变量："></a>会话变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">作用域：针对于当前会话(连接)有效。</span><br><span class="line"></span><br><span class="line">例1：查看所有会话变量：</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line"></span><br><span class="line">2：查看满足条件的部分会话变量：</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line"></span><br><span class="line">3：查看指定的会话变量的值</span><br><span class="line">SELECT @@autocommit;</span><br><span class="line">SELECT @@session,tx_isolation;</span><br><span class="line"></span><br><span class="line">4：为某个会话变量赋值</span><br><span class="line">SET @@seassion,tx_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br><span class="line">SET SESSION tx_isolation&#x3D;&#39;read-committed&#39;;</span><br></pre></td></tr></table></figure><h6 id="自定义变量：-1"><a href="#自定义变量：-1" class="headerlink" title="自定义变量："></a>自定义变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">说明：变量由用户自定义，而不是系统提供的</span><br><span class="line"></span><br><span class="line">使用步骤：</span><br><span class="line">1：声明</span><br><span class="line">2：赋值</span><br><span class="line">3：使用(查看、比较、运算等)</span><br></pre></td></tr></table></figure><h6 id="用户变量："><a href="#用户变量：" class="headerlink" title="用户变量："></a>用户变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">作用域：针对于当前会话（连接）有效，作用域同于会话变量</span><br><span class="line"></span><br><span class="line">赋值操作符：&#x3D; 或 :&#x3D;</span><br><span class="line">①：声明并初始化：</span><br><span class="line">SET @变量名&#x3D;值;</span><br><span class="line">SET @变量名:&#x3D;值;</span><br><span class="line">SELECT @变量名:&#x3D;值;</span><br><span class="line"></span><br><span class="line">②：赋值(更新变量的值)</span><br><span class="line">方式一：</span><br><span class="line">SET @变量名&#x3D;值;</span><br><span class="line">SET @变量名:&#x3D;值;</span><br><span class="line">SELECT @变量名:&#x3D;值;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">SELECT 字段 INFO @变量名</span><br><span class="line">FROM 表;</span><br><span class="line"></span><br><span class="line">③使用(查看变量的值)：</span><br><span class="line">SELECT @变量名;</span><br></pre></td></tr></table></figure><h6 id="局部变量："><a href="#局部变量：" class="headerlink" title="局部变量："></a>局部变量：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">作用域：仅仅定义在它的begin end块中有效</span><br><span class="line">应用在 begin end中的第一句话</span><br><span class="line"></span><br><span class="line">①：声明</span><br><span class="line">DECLARE 变量名 类型;</span><br><span class="line">DECLARE 变量名 类型 【DEFAULT 值】;</span><br><span class="line"></span><br><span class="line">②：赋值(更新变量的值)</span><br><span class="line">方式一：</span><br><span class="line">SET 局部变量名&#x3D;值;</span><br><span class="line">SET 局部变量名:&#x3D;值;</span><br><span class="line">SELECT 局部变量名:&#x3D;值;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">SELECT 字段 INFO 具备变量名</span><br><span class="line">FROM 表;</span><br><span class="line"></span><br><span class="line">③：使用(查看变量的值)</span><br><span class="line">SELECT 局部变量名;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：声明两个变量，求和并打印</span><br><span class="line">#用户变量</span><br><span class="line">SET @m&#x3D;1;</span><br><span class="line">SET @n&#x3D;1;</span><br><span class="line">SET @sum&#x3D;@m+@n;</span><br><span class="line">SELECT @sum;</span><br><span class="line"></span><br><span class="line">#局部变量</span><br><span class="line">DECLARE m INT DEFAULT 1;</span><br><span class="line">DECLARE n INT DEFAULT 1;</span><br><span class="line">DECLARE SUM INT;</span><br><span class="line">SET SUM&#x3D;m+n;</span><br><span class="line">SELECT SUM;</span><br></pre></td></tr></table></figure><p>用户变量和局部变量的对比：</p><table><thead><tr><th align="center"></th><th align="center">作用域</th><th align="center">定义位置</th><th align="center">语法</th></tr></thead><tbody><tr><td align="center">用户变量</td><td align="center">当前会话</td><td align="center">会话的任何地方</td><td align="center">加@符号，不用指定类型</td></tr><tr><td align="center">局部变量</td><td align="center">定义它的BEGIN END中</td><td align="center">BEGIN END的第一句话</td><td align="center">一般不用加@，需要指定类型</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;系统变量：&quot;&gt;&lt;a href=&quot;#系统变量：&quot; class=&quot;headerlink&quot; title=&quot;系统变量：&quot;&gt;&lt;/a&gt;系统变量：&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL视图</title>
    <link href="https://7heng.github.io/2021/04/01/MySQL%E8%A7%86%E5%9B%BE/"/>
    <id>https://7heng.github.io/2021/04/01/MySQL%E8%A7%86%E5%9B%BE/</id>
    <published>2021-04-01T09:39:53.000Z</published>
    <updated>2021-04-02T12:57:13.255Z</updated>
    
    <content type="html"><![CDATA[<p>含义：虚拟表，和普通表一样使用</p><p>MySQL15.1版本出现的新特性，是通过表动态生成的数据。</p><table><thead><tr><th align="center"></th><th align="center">创建语法的关键字</th><th align="center">是否实际占用物理空间</th><th align="center">使用</th></tr></thead><tbody><tr><td align="center">视图</td><td align="center">create view</td><td align="center">只是保存了sql逻辑</td><td align="center">增删改查，只是一般不能增删改</td></tr><tr><td align="center">表</td><td align="center">create table</td><td align="center">保存了数据</td><td align="center">增删改查</td></tr></tbody></table><h6 id="视图的好处："><a href="#视图的好处：" class="headerlink" title="视图的好处："></a>视图的好处：</h6><p>1：sql语句提高重复性，效率高。</p><p>2：和表实现了分离，提高了安全性。</p><h6 id="视图的创建："><a href="#视图的创建：" class="headerlink" title="视图的创建："></a>视图的创建：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">CREATE VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><h6 id="视图的增删改查："><a href="#视图的增删改查：" class="headerlink" title="视图的增删改查："></a>视图的增删改查：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1：查看视图的数据</span><br><span class="line">SELECT * FROM my_v4;</span><br><span class="line">SELECT * FROM my_v1 WHERE last_name&#x3D;&#39;partners&#39;;</span><br><span class="line"></span><br><span class="line">2：插入视图的数据</span><br><span class="line">INSERT INTO my_V4(last_name,department_id) VALUES(&#39;柯南&#39;,18);</span><br><span class="line"></span><br><span class="line">3：修改视图的数据</span><br><span class="line">UPDATE my_v4 SET last_name&#x3D;&#39;秀一&#39;WHERE last_name&#x3D;&#39;安室透&#39;;</span><br><span class="line"></span><br><span class="line">4：删除视图的数据</span><br><span class="line">DELETE FROM my_v4;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：查询姓张的学生名和专业名</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m ON s.&#39;majorid&#39;&#x3D;m.&#39;id&#39;</span><br><span class="line">WHERE s.&#39;stuname&#39; LIKE &#39;张%&#39;;</span><br><span class="line"></span><br><span class="line">CREATE VIEW v1</span><br><span class="line">AS</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER stuinfo s</span><br><span class="line">INNER JOIN major m ON s.&#39;majorid&#39;-m.&#39;id&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">创建视图：</span><br><span class="line">语法：</span><br><span class="line">CREATE VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line">例1：查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="line">①：创建</span><br><span class="line">CREATE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d ON e.department_id  &#x3D; d.department_id</span><br><span class="line">JOIN jobs j ON j.job_id  &#x3D; e.job_id;</span><br><span class="line"></span><br><span class="line">②：使用</span><br><span class="line">SELECT * FROM myv1 WHERE last_name LIKE &#39;%a%&#39;;</span><br><span class="line"></span><br><span class="line">2：查询各部门的平均工资级别</span><br><span class="line">①：创建视图查看每个部门的平均工资</span><br><span class="line">CREATE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">②：使用</span><br><span class="line">SELECT myv2.&#96;ag&#96;,g.grade_level</span><br><span class="line">FROM myv2</span><br><span class="line">JOIN job_grades g</span><br><span class="line">ON myv2.&#96;ag&#96; BETWEEN g.&#96;lowest_sal&#96; AND g.&#96;highest_sal&#96;;</span><br><span class="line"></span><br><span class="line">3：查询平均工资最低的部门信息</span><br><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">4：查询平均工资最低的部门名和工资</span><br><span class="line">CREATE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">SELECT d.*,m.ag</span><br><span class="line">FROM myv3 m</span><br><span class="line">JOIN departments d</span><br><span class="line">ON m.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">视图的修改：</span><br><span class="line">方式一：</span><br><span class="line">create or replace view  视图名</span><br><span class="line">as</span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">SELECT * FROM myv3 </span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">alter view 视图名</span><br><span class="line">as</span><br><span class="line">查询语句;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">ALTER VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除视图：</span><br><span class="line">语法：drop view 视图名,视图名,...;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">DROP VIEW emp_v1,emp_v2,myv3;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看视图：</span><br><span class="line">DESC myv3;</span><br><span class="line">SHOW CREATE VIEW myv3;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">视图的更新：</span><br><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email,salary*12(1+IFNULL(commission_pct,0)) &quot;annual salary&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.插入</span><br><span class="line">INSERT INTO myv1 VALUES(&#39;恒子&#39;,&#39;Cy7heng@163.com&#39;);</span><br><span class="line"></span><br><span class="line">#2.修改</span><br><span class="line">UPDATE myv1 SET last_name &#x3D; &#39;张无忌&#39; WHERE last_name&#x3D;&#39;宇智波鼬&#39;;</span><br><span class="line"></span><br><span class="line">#3.删除</span><br><span class="line">DELETE FROM myv1 WHERE last_name &#x3D; &#39;漩涡鸣人&#39;;</span><br></pre></td></tr></table></figure><h5 id="具备以下特点的视图不允许更新："><a href="#具备以下特点的视图不允许更新：" class="headerlink" title="具备以下特点的视图不允许更新："></a>具备以下特点的视图不允许更新：</h5><p><strong>包含以下关键字的sql语句，分组函数、distinot、group by、having、union、或者union all</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT MAX(salary) m,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY deparment_id;</span><br><span class="line"></span><br><span class="line"># 常量视图：</span><br><span class="line">CREATE OR REPLACE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT &#39;john&#39; NAME;</span><br><span class="line"></span><br><span class="line"># Select中包含子查询：</span><br><span class="line">CREATE OR REPLACE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT department_id,(SELECT MAX(salary) FROM employees) 最高工资</span><br><span class="line">FROM departments;</span><br><span class="line"></span><br><span class="line"># join:</span><br><span class="line">CREATE OR REPLACE VIEW myv4</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.department_id  &#x3D; d.department_id;</span><br><span class="line"></span><br><span class="line"># from一个不能更新的视图</span><br><span class="line">CREATE OR REPLACE VIEW myv5</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM myv3;</span><br><span class="line"></span><br><span class="line"># where子句的子查询引用了from子句中的表</span><br><span class="line">CREATE OR REPLACE VIEW myv6</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,email,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN(</span><br><span class="line">SELECT  manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IS NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;含义：虚拟表，和普通表一样使用&lt;/p&gt;
&lt;p&gt;MySQL15.1版本出现的新特性，是通过表动态生成的数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;创建语法的关键字&lt;/th&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL-TCL</title>
    <link href="https://7heng.github.io/2021/03/31/MySQL-TCL/"/>
    <id>https://7heng.github.io/2021/03/31/MySQL-TCL/</id>
    <published>2021-03-31T08:56:23.000Z</published>
    <updated>2021-03-31T12:35:00.795Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Transaction Control Language 事务控制语言</strong></p><h6 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h6><p><strong>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</strong></p><p>案例：转账</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">柯南1000</span><br><span class="line">秀一1000</span><br><span class="line"></span><br><span class="line">update表set柯南的余额&#x3D;500where name&#x3D;&#39;柯南&#39;</span><br><span class="line">意外</span><br><span class="line">update表set秀一的余额&#x3D;1500where name&#x3D;&#39;秀一&#39;</span><br><span class="line"></span><br><span class="line">事务的特性：</span><br><span class="line">ACID</span><br><span class="line">原子性：一个事务不可再分割，要么都执行要么都不执行。</span><br><span class="line">一致性：一个事务执行会使数据从一个一致状态切换到另一个一致状态。</span><br><span class="line">隔离性：一个事务的执行不受其他事务事务的干扰。</span><br><span class="line">持久性：一个事务一旦提交，则会永久的改变数据库的数据。</span><br><span class="line"></span><br><span class="line">事务的创建：</span><br><span class="line">隐式事务：事务没有明显的开启和结束的标记。</span><br><span class="line">比如insert、update、delete语句</span><br><span class="line"></span><br><span class="line">delete from 表 where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">显示事务：事务具有明显的开启和结束的标记</span><br><span class="line">前提：必须先设置自动提交功能为禁用</span><br><span class="line"></span><br><span class="line">set autocommit&#x3D;0;</span><br><span class="line"></span><br><span class="line">步骤1：开启事务</span><br><span class="line">set autocommit&#x3D;0;</span><br><span class="line">start transaction;可选的</span><br><span class="line"></span><br><span class="line">步骤2：编写事务中的sql语句(select insert update delete)</span><br><span class="line">语句1;</span><br><span class="line">语句2;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">步骤3：结束事务</span><br><span class="line">commit;提交事务</span><br><span class="line">rollback;回滚事务</span><br><span class="line"></span><br><span class="line">savepoint 节点名;设置保存点</span><br></pre></td></tr></table></figure><h6 id="事务的割离级别："><a href="#事务的割离级别：" class="headerlink" title="事务的割离级别："></a>事务的割离级别：</h6><table><thead><tr><th align="center"></th><th align="center">脏读</th><th align="center">不可重复度</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">read committed</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">repeatable read</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">serializable</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p><strong>MySQL中默认，第三个割离级别    repeatable read</strong></p><p><strong>Oracle中默认第二个隔离级别    read committed</strong></p><p>查看割离级别：</p><p><code>select @@tx_isolation;</code></p><p>设置割离级别：</p><p><code>set session|gloable    transaction    isolation    level    割离级别;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务的语句：</span><br><span class="line">uadate 表 set 柯南的余额&#x3D;500 where name&#x3D;&#39;柯南&#39;</span><br><span class="line">update 表 set 秀一的余额&#x3D;1500 where name&#x3D;&#39;秀一&#39;</span><br><span class="line">结束事务的语句;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.演示事务的使用步骤</span><br><span class="line">开启事务</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;安室透&#39;;</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;秀一&#39;;</span><br><span class="line"></span><br><span class="line">#结束事务</span><br><span class="line">ROLLBACK;</span><br><span class="line">#commit;</span><br><span class="line"></span><br><span class="line">2.演示事务对于delete和truncate的处理的区别</span><br><span class="line"></span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">DELETE FROM account;</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">3.演示savepoint 的使用</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account WHERE id&#x3D;25;</span><br><span class="line">SAVEPOINT a;#设置保存点</span><br><span class="line">DELETE FROM account WHERE id&#x3D;28;</span><br><span class="line">ROLLBACK TO a;#回滚到保存点</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Transaction Control Language 事务控制语言&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;事务：&quot;&gt;&lt;a href=&quot;#事务：&quot; class=&quot;headerlink&quot; title=&quot;事务：&quot;&gt;&lt;/a&gt;事务：&lt;/h6&gt;&lt;p&gt;&lt;stron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL约束</title>
    <link href="https://7heng.github.io/2021/03/31/MySQL%E7%BA%A6%E6%9D%9F/"/>
    <id>https://7heng.github.io/2021/03/31/MySQL%E7%BA%A6%E6%9D%9F/</id>
    <published>2021-03-31T04:45:58.000Z</published>
    <updated>2021-03-31T05:42:00.760Z</updated>
    
    <content type="html"><![CDATA[<h6 id="常见约束："><a href="#常见约束：" class="headerlink" title="常见约束："></a>常见约束：</h6><p>含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确性和可靠性。</p><p>分类：六大约束</p><p><code>NOT NULL</code>：<strong>非空</strong>，用于保证该字段的值不能为空。—&gt;例如姓名、学号。</p><p><code>DEFAULT</code>：<strong>默认</strong>，用于保证该字段有默认值。—&gt;例如性别。</p><p><code>PRIMARY KEY</code>：<strong>主键</strong>，用于保证字段的值具有唯一性，并且非空。—&gt;例如学号、员工编号等。</p><p><code>UNIQUE</code>：<strong>唯一</strong>，用来保证该字段的值具有唯一性，可以为空。—&gt;例如座位号。</p><p><code>CHECK</code>：<strong>检查的约束</strong>[MySQL不支持]—&gt;例如年龄、性别。</p><p><code>POREIGN KEY</code>：<strong>外键</strong>，</p><p>用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。—&gt;例如学生表的专业编号，员工表的部门编号，员工表的工种编号。</p><h6 id="添加约束的时机："><a href="#添加约束的时机：" class="headerlink" title="添加约束的时机："></a>添加约束的时机：</h6><p>1：创建表时</p><p>2：修改表</p><h6 id="约束的添加分类："><a href="#约束的添加分类：" class="headerlink" title="约束的添加分类："></a>约束的添加分类：</h6><p><strong>列级约束</strong>：六大约束语法上都支持，但外键约束没有效果。</p><p><strong>表级约束</strong>：除了非空、默认，其他的都支持。</p><h6 id="主键和唯一的对比："><a href="#主键和唯一的对比：" class="headerlink" title="主键和唯一的对比："></a>主键和唯一的对比：</h6><table><thead><tr><th align="center"></th><th align="center">保证唯一性</th><th align="center">是否允许为空</th><th align="center">一个表中可以有多少个</th><th align="center">是否允许组合</th></tr></thead><tbody><tr><td align="center">主键</td><td align="center">√</td><td align="center">×</td><td align="center">至多有一个</td><td align="center">√，但不推荐</td></tr><tr><td align="center">唯一</td><td align="center">√</td><td align="center">√</td><td align="center">可以有多个</td><td align="center">√，但不推荐</td></tr></tbody></table><p><strong>外键：</strong></p><p>1：要求在从表设置外键关系。</p><p>2：从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求。</p><p>3：主表的关联列必须是一个key（一般是主键或唯一)。</p><p>4：插入数据时，先插入主表，再插入从表。</p><p>删除数据时，先删除从表，再删除主表。</p><h6 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">CEEATE TABLE 表名(</span><br><span class="line">字段名 字段类型 列级约束,</span><br><span class="line">    字段名字段类型,</span><br><span class="line">    表级约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">一：添加列级约束：</span><br><span class="line">USE students;</span><br><span class="line">DROP TABLE stuinfo(</span><br><span class="line">id INT PRIMARY KEY,#主键</span><br><span class="line">stuName VARCHAR(20) NOT NULL UNIQUE,#非空</span><br><span class="line">gender CHAR(1) CHECK(gender&#x3D;&#39;男&#39; OR gender&#x3D;&#39;女&#39;),#检查</span><br><span class="line">seat INT UNIQUE,#唯一</span><br><span class="line">age INT DEFAULT18,#默认约束</span><br><span class="line">majorid INT REFERENCES major(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE mahor(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">majorName VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">1：查看stuinfo中的所有索引，包括主键、外键、唯一</span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br><span class="line"></span><br><span class="line">2：添加表级约束</span><br><span class="line">语法：[constraint 约束名] 约束类型(字段名);</span><br><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE suuinfo(</span><br><span class="line">id INT,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">seat INT,</span><br><span class="line"></span><br><span class="line">CONSTARINT pk PRIMARY KEY(id),#主键</span><br><span class="line">CONSTARINT uq UNIQUE(seat),#唯一键</span><br><span class="line">CONSTARINT ck CHECK(gender &#x3D; &#39;男&#39; OR gender &#x3D; &#39;女&#39;), #检查</span><br><span class="line">CONSTARINT fk_stuinfo_major FPREIGN KEY(majorid) REFERENCES major(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">通用写法：</span><br><span class="line">CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">sex CHAR(1),</span><br><span class="line">age INT DEFAULT 18,</span><br><span class="line">seat INT UNIQUE,</span><br><span class="line">majorid INT,</span><br><span class="line">CONSTRAINT fk_stuiofo_major FOREIGN KEY(majorid) REFERENCES major(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">二：修改表时添加约束</span><br><span class="line">1：添加列级约束</span><br><span class="line">alter table 表名 modify colum 字段名 字段类型 新约束;</span><br><span class="line"></span><br><span class="line">2：添加表级约束</span><br><span class="line">alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的作用】;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">DROP TABLE IF EXISTS stuidfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">seat INT,</span><br><span class="line">age INT,</span><br><span class="line">majorid INT</span><br><span class="line">);</span><br><span class="line">DESC stuinfo;</span><br><span class="line"></span><br><span class="line">#1.添加非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;</span><br><span class="line"></span><br><span class="line">#2.添加默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</span><br><span class="line"></span><br><span class="line">#3.添加主键</span><br><span class="line">#①列级约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">#②表级约束</span><br><span class="line">ALTER TABLE stuinfo ADD PRIMARY KEY(id);</span><br><span class="line"></span><br><span class="line">#4.添加唯一</span><br><span class="line">#①列级约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</span><br><span class="line">#②表级约束</span><br><span class="line">ALTER TABLE stuinfo ADD UNIQUE(seat);</span><br><span class="line"></span><br><span class="line">#5.添加外键</span><br><span class="line">ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); </span><br><span class="line"></span><br><span class="line">三：修改表时删除约束</span><br><span class="line">#1.删除非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br><span class="line"></span><br><span class="line">#2.删除默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT ;</span><br><span class="line"></span><br><span class="line">#3.删除主键</span><br><span class="line">ALTER TABLE stuinfo DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">#4.删除唯一</span><br><span class="line">ALTER TABLE stuinfo DROP INDEX seat;</span><br><span class="line"></span><br><span class="line">#5.删除外键</span><br><span class="line">ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br></pre></td></tr></table></figure><h6 id="标识列："><a href="#标识列：" class="headerlink" title="标识列："></a>标识列：</h6><p>又称为自增长列<br>含义：可以不用手动的插入值，系统提供默认的序列值</p><p><strong>特点：</strong><br>1、标识列必须和主键搭配吗？    不一定，但要求是一个key<br>2、一个表可以有几个标识列？    至多一个！<br>3、标识列的类型只能是数值型<br>4、标识列可以通过 SET auto_increment_increment=3;设置步长可以通过 手动插入值，设置起始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#一、创建表时设置标识列</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS tab_identity;</span><br><span class="line">CREATE TABLE tab_identity(</span><br><span class="line">id INT  ,</span><br><span class="line">NAME FLOAT UNIQUE AUTO_INCREMENT,</span><br><span class="line">seat INT </span><br><span class="line">);</span><br><span class="line">TRUNCATE TABLE tab_identity;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_identity(id,NAME) VALUES(NULL,&#39;john&#39;);</span><br><span class="line">INSERT INTO tab_identity(NAME) VALUES(&#39;lucy&#39;);</span><br><span class="line">SELECT * FROM tab_identity;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%auto_increment%&#39;;</span><br><span class="line"></span><br><span class="line">SET auto_increment_increment&#x3D;3;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;常见约束：&quot;&gt;&lt;a href=&quot;#常见约束：&quot; class=&quot;headerlink&quot; title=&quot;常见约束：&quot;&gt;&lt;/a&gt;常见约束：&lt;/h6&gt;&lt;p&gt;含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确性和可靠性。&lt;/p&gt;
&lt;p&gt;分类：六大约束&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL数据类型</title>
    <link href="https://7heng.github.io/2021/03/29/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://7heng.github.io/2021/03/29/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-29T10:59:13.000Z</published>
    <updated>2021-03-29T12:30:04.663Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">常见的数据类型：</span><br><span class="line">数值型: 整形</span><br><span class="line">   小数</span><br><span class="line">     定点数</span><br><span class="line">     浮点数</span><br><span class="line">字符型:</span><br><span class="line">较短的文本：char、varchar</span><br><span class="line">较长的文本：text、blob(较长的二进制数据)</span><br><span class="line">日期型:</span><br><span class="line"></span><br><span class="line">整形</span><br><span class="line">分类：tinyint(1)、smallint(2)、mediumint(3)、int&#x2F;integer(4)、bigint(8)</span><br><span class="line">特点：①：如果不设置无符号还是有符号，默认是有符号的，如果想设置无符号，需要添加unsigned关键字</span><br><span class="line">②：如果插入的数值超出整型的范围，会报out of range异常，并且插入临界值。</span><br><span class="line">③：如果不设置长度，会有默认的长度。</span><br><span class="line">长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用。</span><br><span class="line"></span><br><span class="line">例：何设置无符号和有符号</span><br><span class="line">DROP TABLE IF EXISTS tab_int;</span><br><span class="line">CREATE TABLE tab_int(</span><br><span class="line">t1 INT(7) ZEROFILL,</span><br><span class="line">t2 INT(7) ZEROFILL </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC tab_int;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int VALUES(-123456);</span><br><span class="line">INSERT INTO tab_int VALUES(-123456,-123456);</span><br><span class="line">INSERT INTO tab_int VALUES(2147483648,4294967296);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int VALUES(123,123);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_int;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">小数</span><br><span class="line">分类：</span><br><span class="line">1.浮点型</span><br><span class="line">float(M,D)</span><br><span class="line">double(M,D)</span><br><span class="line">2.定点型</span><br><span class="line">dec(M，D)</span><br><span class="line">decimal(M,D)</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">①</span><br><span class="line">M：整数部位+小数部位</span><br><span class="line">D：小数部位</span><br><span class="line">如果超过范围，则插入临界值</span><br><span class="line">②</span><br><span class="line">M和D都可以省略</span><br><span class="line">如果是decimal，则M默认为10，D默认为0</span><br><span class="line">如果是float和double，则会根据插入的数值的精度来决定精度</span><br><span class="line"></span><br><span class="line">③定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</span><br><span class="line"></span><br><span class="line">测试M和D</span><br><span class="line">DROP TABLE tab_float;</span><br><span class="line">CREATE TABLE tab_float(</span><br><span class="line">f1 FLOAT,</span><br><span class="line">f2 DOUBLE,</span><br><span class="line">f3 DECIMAL</span><br><span class="line">);</span><br><span class="line">SELECT * FROM tab_float;</span><br><span class="line">DESC tab_float;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_float VALUES(123.4523,123.4523,123.4523);</span><br><span class="line">INSERT INTO tab_float VALUES(123.456,123.456,123.456);</span><br><span class="line">INSERT INTO tab_float VALUES(123.4,123.4,123.4);</span><br><span class="line">INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);</span><br><span class="line">原则：所选择的类型越简单越好，能保存数值的类型越小越好。</span><br><span class="line"></span><br><span class="line">字符型</span><br><span class="line">较短的文本：</span><br><span class="line">char</span><br><span class="line">varchar</span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line">binary和varbinary用于保存较短的二进制</span><br><span class="line">enum用于保存枚举</span><br><span class="line">set用于保存集合</span><br><span class="line"></span><br><span class="line">较长的文本：</span><br><span class="line">text</span><br><span class="line">blob(较大的二进制)</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">写法M的意思  特点空间的耗费效率</span><br><span class="line">charchar(M)最大的字符数，可以省略，默认为1固定长度的字符   比较耗费    高</span><br><span class="line"></span><br><span class="line">varchar varchar(M)   最大的字符数，不可以省略  可变长度的字符  比较节省  低</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_char(</span><br><span class="line">c1 ENUM(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_char VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;b&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;c&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;m&#39;);</span><br><span class="line">INSERT INTO tab_char VALUES(&#39;A&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_set;</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_set(</span><br><span class="line"></span><br><span class="line">s1 SET(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">INSERT INTO tab_set VALUES(&#39;a&#39;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#39;A,B&#39;);</span><br><span class="line">INSERT INTO tab_set VALUES(&#39;a,c,d&#39;);</span><br><span class="line"></span><br><span class="line">日期型</span><br><span class="line">分类：</span><br><span class="line">date只保存日期</span><br><span class="line">time 只保存时间</span><br><span class="line">year只保存年</span><br><span class="line"></span><br><span class="line">datetime保存日期+时间</span><br><span class="line">timestamp保存日期+时间</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"></span><br><span class="line">字节 范围 时区等的影响</span><br><span class="line">datetime 81000——9999       不受</span><br><span class="line">timestamp 4    1970-2038        受</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_date(</span><br><span class="line">t1 DATETIME,</span><br><span class="line">t2 TIMESTAMP</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_date VALUES(NOW(),NOW());</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_date;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;time_zone&#39;;</span><br><span class="line"></span><br><span class="line">SET time_zone&#x3D;&#39;+9:00&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java常见异常</title>
    <link href="https://7heng.github.io/2021/03/28/java%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/"/>
    <id>https://7heng.github.io/2021/03/28/java%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</id>
    <published>2021-03-28T11:44:57.000Z</published>
    <updated>2021-03-28T12:18:48.881Z</updated>
    
    <content type="html"><![CDATA[<h6 id="java异常体系结构："><a href="#java异常体系结构：" class="headerlink" title="java异常体系结构："></a>java异常体系结构：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">    |-----java.lang.Error:一般不编写针对性的代码进行处理。</span><br><span class="line">    |-----java.lang.Exception:可以进行异常的处理</span><br><span class="line">       |------编译时异常(checked)</span><br><span class="line">             |-----IOException</span><br><span class="line">                |-----FileNotFoundException</span><br><span class="line">             |-----ClassNotFoundException</span><br><span class="line">       |------运行时异常(unchecked,RuntimeException)</span><br><span class="line">             |-----NullPointerException</span><br><span class="line">             |-----ArrayIndexOutOfBoundsException</span><br><span class="line">             |-----ClassCastException</span><br><span class="line">             |-----NumberFormatException</span><br><span class="line">             |-----InputMismatchException</span><br><span class="line">             |-----ArithmeticException</span><br></pre></td></tr></table></figure><h6 id="java常见异常举例："><a href="#java常见异常举例：" class="headerlink" title="java常见异常举例："></a>java常见异常举例：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">下例为编译时异常：</span><br><span class="line">public void test7()&#123;</span><br><span class="line">    File file &#x3D; new File(&quot;hello.txt&quot;);</span><br><span class="line">    FileInputStream fis &#x3D; new FileInputStream(file);</span><br><span class="line">    </span><br><span class="line">    int data &#x3D; fis.read();</span><br><span class="line">    while(data !&#x3D; -1)&#123;</span><br><span class="line">       System.out.print((char)data);</span><br><span class="line">       data &#x3D; fis.read();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fis.close();</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">下例运行时异常：</span><br><span class="line">1：AirthmeticExctption算数异常：</span><br><span class="line"></span><br><span class="line">public void test6()&#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 0;</span><br><span class="line">System.out.println(a &#x2F; b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2：InputMismatchException输入类型不匹配异常：</span><br><span class="line"></span><br><span class="line">public void test5()&#123;</span><br><span class="line">Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">int score &#x3D; scanner.nextInt();</span><br><span class="line">System.out.println(score);</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3：NumberFormatException数字格式异常：</span><br><span class="line"></span><br><span class="line">public void test4()&#123;</span><br><span class="line">    </span><br><span class="line">String str &#x3D; &quot;123&quot;;</span><br><span class="line">str &#x3D; &quot;abc&quot;;</span><br><span class="line">int num &#x3D; Integer.parseInt(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4：ClassCastException类型转换异常：</span><br><span class="line"></span><br><span class="line">public void test3()&#123;</span><br><span class="line">Object obj &#x3D; new Date();</span><br><span class="line">String str &#x3D; (String)obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5：IndexOutOfBoundsException数组下标越界异常：</span><br><span class="line"></span><br><span class="line">public void test2()&#123;</span><br><span class="line">&#x2F;&#x2F;  ArrayIndexOutOfBoundsException</span><br><span class="line">&#x2F;&#x2F;int[] arr &#x3D; new int[10];</span><br><span class="line">&#x2F;&#x2F;System.out.println(arr[10]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  StringIndexOutOfBoundsException</span><br><span class="line">String str &#x3D; &quot;abc&quot;;</span><br><span class="line">System.out.println(str.charAt(3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6：NullPointerException空指针异常：</span><br><span class="line"></span><br><span class="line">public void test1()&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int[] arr &#x3D; null;</span><br><span class="line">&#x2F;&#x2F;System.out.println(arr[3]);</span><br><span class="line"></span><br><span class="line">String str &#x3D; &quot;abc&quot;;</span><br><span class="line">str &#x3D; null;</span><br><span class="line">System.out.println(str.charAt(0));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;java异常体系结构：&quot;&gt;&lt;a href=&quot;#java异常体系结构：&quot; class=&quot;headerlink&quot; title=&quot;java异常体系结构：&quot;&gt;&lt;/a&gt;java异常体系结构：&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL-DDL</title>
    <link href="https://7heng.github.io/2021/03/28/MySQL-DDL/"/>
    <id>https://7heng.github.io/2021/03/28/MySQL-DDL/</id>
    <published>2021-03-28T07:03:02.000Z</published>
    <updated>2021-03-28T07:49:28.040Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据定义语言：</span><br><span class="line">创建：create</span><br><span class="line">修改：alter</span><br><span class="line">删除：drop</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">库的创建</span><br><span class="line">语法：select database [if not exists] 库名;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例1：创建库bleach</span><br><span class="line">CREATE DATABASE IF NOT EXISTS bleach;</span><br><span class="line"></span><br><span class="line">2：库的修改 (MySQL已经移除)</span><br><span class="line">RENAME DATABASE bleach TO 新库名;</span><br><span class="line"></span><br><span class="line">3：更改库的字符集</span><br><span class="line">ALTER DATABASE bleach CHARACTER SET gbk</span><br><span class="line"></span><br><span class="line">4：库的删除</span><br><span class="line">DROP DATABASE IF EXISTS bleach；</span><br></pre></td></tr></table></figure><h6 id="表的管理："><a href="#表的管理：" class="headerlink" title="表的管理："></a>表的管理：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">create table 表名(</span><br><span class="line">列名 列的类型【(长度) 约束】,</span><br><span class="line">列名 列的类型【(长度) 约束】,</span><br><span class="line">列名 列的类型【(长度) 约束】,</span><br><span class="line">...</span><br><span class="line">列名 列的类型【(长度) 约束】</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">例1：创建表bleach</span><br><span class="line">CREATE TABLE bleach&#123;</span><br><span class="line">id INT,#编号</span><br><span class="line">bName VARCHAR(20),#图书名</span><br><span class="line">price DOUBLE,#价格</span><br><span class="line">authorId  INT,#作者编号</span><br><span class="line">publishDate DATETIME#出版日期</span><br><span class="line">&#125;;</span><br><span class="line">DESC bleach;</span><br><span class="line"></span><br><span class="line">例2：创建表author</span><br><span class="line">CREATE TABLE IF NOT EXISTS author(</span><br><span class="line">id INT,</span><br><span class="line">au_name VARCHAR(20),</span><br><span class="line">nation VARCHAR(10)</span><br><span class="line">)</span><br><span class="line">DESC author;</span><br><span class="line"></span><br><span class="line">3:表的修改</span><br><span class="line">语法：alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;</span><br><span class="line"></span><br><span class="line">①修改列名</span><br><span class="line">ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;</span><br><span class="line"></span><br><span class="line">②修改列的类型或约束</span><br><span class="line">ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;</span><br><span class="line"></span><br><span class="line">③添加新列</span><br><span class="line">ALTER TABLE author ADD COLUMN annual DOUBLE; </span><br><span class="line"></span><br><span class="line">④删除列</span><br><span class="line">ALTER TABLE book_author DROP COLUMN  annual;</span><br><span class="line"></span><br><span class="line">⑤修改表名</span><br><span class="line">ALTER TABLE author RENAME TO book_author;</span><br><span class="line"></span><br><span class="line">DESC book;</span><br><span class="line"></span><br><span class="line">4：表的删除</span><br><span class="line">DROP TABLE IF EXISTS book_author;</span><br><span class="line"></span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">#通用的写法：</span><br><span class="line">DROP DATABASE IF EXISTS 旧库名;</span><br><span class="line">CREATE DATABASE 新库名;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS 旧表名;</span><br><span class="line">CREATE TABLE  表名();</span><br><span class="line"></span><br><span class="line">5：表的复制</span><br><span class="line">INSERT INTO author VALUES</span><br><span class="line">(1,&#39;姜文&#39;,&#39;中国&#39;),</span><br><span class="line">(2,&#39;恒子&#39;,&#39;中国&#39;),</span><br><span class="line">(3,&#39;胡歌&#39;,&#39;中国&#39;),</span><br><span class="line">(4,&#39;彭于晏&#39;,&#39;中国&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM Author;</span><br><span class="line">SELECT * FROM copy2;</span><br><span class="line"></span><br><span class="line">#仅仅复制表的结构</span><br><span class="line">CREATE TABLE copy LIKE author;</span><br><span class="line"></span><br><span class="line">#复制表的结构+数据</span><br><span class="line">CREATE TABLE copy2 </span><br><span class="line">SELECT * FROM author;</span><br><span class="line"></span><br><span class="line">#只复制部分数据</span><br><span class="line">CREATE TABLE copy3</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author </span><br><span class="line">WHERE nation&#x3D;&#39;中国&#39;;</span><br><span class="line"></span><br><span class="line">#仅仅复制某些字段</span><br><span class="line">CREATE TABLE copy4 </span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author</span><br><span class="line">WHERE 0;</span><br></pre></td></tr></table></figure><h6 id="库和表的管理例题："><a href="#库和表的管理例题：" class="headerlink" title="库和表的管理例题："></a>库和表的管理例题：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">1：创建表dept1</span><br><span class="line">NAMENULL?TYPE</span><br><span class="line">idINT(7)</span><br><span class="line">NAMEVARCHAR(25)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line">CREATE TABLE dept1(</span><br><span class="line">id INT(7),</span><br><span class="line">NAME VARCHAR(25)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">2：将表departments中的数据插入新表dept2中</span><br><span class="line">CREATE TABLE dept2</span><br><span class="line">SELECT department_id,department_name</span><br><span class="line">FROM myemployees.departments;</span><br><span class="line"></span><br><span class="line">3：创建表emp5</span><br><span class="line">NAMENULL?TYPE</span><br><span class="line">idINT(7)</span><br><span class="line">First_nameVARCHAR (25)</span><br><span class="line">Last_nameVARCHAR(25)</span><br><span class="line">Dept_idINT(7)</span><br><span class="line"></span><br><span class="line">CREATE TABLE emp5(</span><br><span class="line">id INT(7),</span><br><span class="line">first_name VARCHAR(25),</span><br><span class="line">last_name VARCHAR(25),</span><br><span class="line">dept_id INT(7)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">4：将列Last_name的长度增加到50</span><br><span class="line">ALTER TABLE emp5 MODIFY COLUMN last_name VARCHAR(50);</span><br><span class="line"></span><br><span class="line">5：根据表employees创建employees2</span><br><span class="line">CREATE TABLE employees2 LIKE myemployees.employees;</span><br><span class="line"></span><br><span class="line">6：删除表emp5</span><br><span class="line">DROP TABLE IF EXISTS emp5;</span><br><span class="line"></span><br><span class="line">7：将表employees2重命名为emp5</span><br><span class="line">ALTER TABLE employees2 RENAME TO emp5;</span><br><span class="line"></span><br><span class="line">8：在表dept和emp5中添加新列test_column，并检查所作的操作</span><br><span class="line">ALTER TABLE emp5 ADD COLUMN test_column INT;</span><br><span class="line"></span><br><span class="line">9；直接删除表emp5中的列 dept_id</span><br><span class="line">DESC emp5;</span><br><span class="line">ALTER TABLE emp5 DROP COLUMN test_column;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL-DML</title>
    <link href="https://7heng.github.io/2021/03/28/MySQL-DML/"/>
    <id>https://7heng.github.io/2021/03/28/MySQL-DML/</id>
    <published>2021-03-28T06:21:11.000Z</published>
    <updated>2021-03-28T07:02:33.745Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据操作语言：</span><br><span class="line">插入：insert</span><br><span class="line">修改：update</span><br><span class="line">删除：delete</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">插入语句</span><br><span class="line">语法：insert into 表名(列名...) values(值1，...);</span><br><span class="line"></span><br><span class="line">#方式一：</span><br><span class="line">例1：</span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">INSER INTO beauty(id,NAME,sex,borndate,phone,girlfriend_name,girlfriend_id)插入的值的类型要与列的类型一致或兼容</span><br><span class="line">VALUES(22,&#39;恒子&#39;，‘男’,&#39;2000-12-22&#39;,&#39;17513077777&#39;,&#39;null&#39;,&#39;1&#39;);日期和字符串需要加单引号或双引号。</span><br><span class="line"></span><br><span class="line">2：不可以为null的列必须插入值，可以为null的列如何插入值？</span><br><span class="line">#方式一：</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUES(18,&#39;贝尔摩德&#39;,&#39;女&#39;,&#39;1999-11-11&#39;,&#39;3333333333&#39;,NULL,7);</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,phone)</span><br><span class="line">VALUES(15,&#39;灰原哀&#39;,&#39;女&#39;,&#39;77777777777&#39;);</span><br><span class="line"></span><br><span class="line">3：列的顺序是否可以调换</span><br><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUES(&#39;步美&#39;,&#39;女&#39;,10,&#39;777&#39;);</span><br><span class="line"></span><br><span class="line">4：列数和值的个数必须一致</span><br><span class="line">INSERT INTO beauty(NAME,sex,id,phone)</span><br><span class="line">VALUES(&#39;世良&#39;,&#39;女&#39;,18,&#39;111&#39;);</span><br><span class="line"></span><br><span class="line">5：可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(18,&#39;柯南&#39;,&#39;男&#39;,NULL,&#39;110&#39;,NULL,NULL);</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">语法：</span><br><span class="line">insert into 表名</span><br><span class="line">set 列名&#x3D;值，列名&#x3D;值...;</span><br><span class="line"></span><br><span class="line">方式一和方式二对比：</span><br><span class="line">1：方式一支持插入多行,方式二不支持</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(16,&#39;灰原哀&#39;,&#39;女&#39;,&#39;1999-7-7&#39;,&#39;8888888&#39;,NULL,1),</span><br><span class="line">(17,&#39;柯南&#39;,&#39;男&#39;,&#39;1990-7-7&#39;,&#39;8888888&#39;,NULL,2),</span><br><span class="line">(18,&#39;小兰&#39;,&#39;女&#39;,&#39;1990-7-7&#39;,&#39;8888888&#39;,NULL,1);</span><br><span class="line"></span><br><span class="line">2：方式一支持子查询，方式二不支持</span><br><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT 18,&#39;秀一&#39;,&#39;99999999&#39;;</span><br><span class="line"></span><br><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT id,boyname,&#39;6666666&#39;</span><br><span class="line">FROM boys WHERE id&lt;3;</span><br><span class="line"></span><br><span class="line">修改语句：</span><br><span class="line">1.修改单表的记录★</span><br><span class="line">语法：</span><br><span class="line">update 表名</span><br><span class="line">set 列&#x3D;新值,列&#x3D;新值,...</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">2.修改多表的记录【补充】</span><br><span class="line">sql92语法：</span><br><span class="line">update 表1 别名,表2 别名</span><br><span class="line">set 列&#x3D;值,...</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法：</span><br><span class="line">update 表1 别名</span><br><span class="line">inner|left|right join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">set 列&#x3D;值,...</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">修改单表的记录</span><br><span class="line">例1：修改beauty表中姓玛的女神的电话为7777777</span><br><span class="line">UPDATE beauty SET phone &#x3D; &#39;7777777&#39;</span><br><span class="line">WHERE NAME LIKE &#39;玛%&#39;;</span><br><span class="line"></span><br><span class="line">2：修改boys表中id号为2的名称为秀一，魅力值 100</span><br><span class="line">UPDATE boys SET boyname&#x3D;&#39;秀一&#39;,usercp&#x3D;100</span><br><span class="line">WHERE id&#x3D;2;</span><br><span class="line"></span><br><span class="line">3：修改多表的记录</span><br><span class="line">修改柯南的女朋友的手机号为777</span><br><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty b ON bo.&#96;id&#96;&#x3D;b.&#96;boyfriend_id&#96;</span><br><span class="line">SET b.&#96;phone&#96;&#x3D;&#39;777&#39;,bo.&#96;userCP&#96;&#x3D;1000</span><br><span class="line">WHERE bo.&#96;boyName&#96;&#x3D;&#39;柯南&#39;;</span><br><span class="line"></span><br><span class="line">4：修改没有男朋友的女神的男朋友编号都为2号</span><br><span class="line">UPDATE boys bo</span><br><span class="line">RIGHT JOIN beauty b ON bo.&#96;id&#96;&#x3D;b.&#96;boyfriend_id&#96;</span><br><span class="line">SET b.&#96;boyfriend_id&#96;&#x3D;2</span><br><span class="line">WHERE bo.&#96;id&#96; IS NULL;</span><br><span class="line"></span><br><span class="line">删除语句：</span><br><span class="line">方式一：delete</span><br><span class="line"></span><br><span class="line">1、单表的删除【★】</span><br><span class="line">delete from 表名 where 筛选条件</span><br><span class="line"></span><br><span class="line">2、多表的删除【补充】</span><br><span class="line">sql92语法：</span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名,表2 别名</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法：</span><br><span class="line">delete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名</span><br><span class="line">inner|left|right join 表2 别名 on 连接条件</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">方式二：truncate</span><br><span class="line">语法：truncate table 表名;</span><br><span class="line"></span><br><span class="line">(delete)</span><br><span class="line">例1：单表的删除</span><br><span class="line">删除手机号以9结尾的女神信息</span><br><span class="line">DELETE FROM beauty WHERE phone LIKE &#39;%9&#39;;</span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line"></span><br><span class="line">2：多表的删除</span><br><span class="line">删除秀一的女朋友的信息</span><br><span class="line">DELETE b</span><br><span class="line">FROM beauty b</span><br><span class="line">INNER JOIN boys bo ON b.&#96;boyfriend_id&#96; &#x3D; bo.&#96;id&#96;</span><br><span class="line">WHERE bo.&#96;boyName&#96;&#x3D;&#39;秀一&#39;;</span><br><span class="line"></span><br><span class="line">3：删除安室透的信息以及他女朋友的信息</span><br><span class="line">DELETE b,bo</span><br><span class="line">FROM beauty b</span><br><span class="line">INNER JOIN boys bo ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">WHERE bo.&#96;boyName&#96;&#x3D;&#39;安室透&#39;;</span><br><span class="line"></span><br><span class="line">(truncate)</span><br><span class="line">例1：将魅力值&gt;100的男神信息删除</span><br><span class="line">TRUNCATE TABLE boys;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【delete和truncate的区别：】</span><br><span class="line"></span><br><span class="line">1.delete 可以加where 条件，truncate不能加。</span><br><span class="line">2.truncate删除，效率高一丢丢。</span><br><span class="line">3.假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始。</span><br><span class="line">4.truncate删除没有返回值，delete删除有返回值。</span><br><span class="line">5.truncate删除不能回滚，delete删除可以回滚。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
</feed>
